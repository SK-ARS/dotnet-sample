

@{
    Layout = null;
}

@model STP.Domain.MovementsAndNotifications.Movements.OutboundNotification
@{
    int UnitType = 0;
}

<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,
				initial-scale=1" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <!-- Bootstrap CSS -->
    @*<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous" />*@
    @*<link rel="preconnect" href="https://fonts.gstatic.com" />*@
    @*<link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap" rel="stylesheet" />*@
    <link href="~/Content/fonts.css" rel="stylesheet" />
    <style>

        .container-fluid {
            padding-right: 15px;
            padding-left: 15px;
            margin-right: auto;
            margin-left: auto;
        }

        .row {
            margin-right: -15px;
            margin-left: -15px;
        }

        .row-no-gutters {
            margin-right: 0;
            margin-left: 0;
        }

            .row-no-gutters [class*="col-"] {
                padding-right: 0;
                padding-left: 0;
            }

        body {
            /*width: 230mm;*/
            width: 100%;
            height: 100%;
            margin: 0 auto;
            padding: 0;
            font-size: 12pt;
            /*background: rgb(204, 204, 204);*/
        }

        * {
            box-sizing: border-box;
            -moz-box-sizing: border-box;
        }


        @@font-face {
            font-family: 'Lato-Light';
            src: url('../../Content/assets/Lato-Light.ttf') format('truetype');
        }

        @@font-face {
            font-family: 'Lato-Medium';
            src: url('../../Content/assets/Lato-Medium.ttf') format('truetype');
        }

        @@font-face {
            font-family: 'Lato-Regular';
            src: url('../../Content/assets/Lato-Regular.ttf') format('truetype');
        }

        @@font-face {
            font-family: 'Lato-Bold';
            src: url('../../Content/assets/Lato-Bold.ttf') format('truetype');
        }

        @@font-face {
            font-family: 'Lato-Semibold';
            src: url('../../Content/assets/Lato-Semibold.ttf') format('truetype');
        }


        .main-page {
            /*width: 220mm;*/
            /* min-height: 297mm;*/
            /*margin: 10mm auto;*/
            background: white;
            /*box-shadow: 0 0 0.5cm rgba(0, 0, 0, 0.5);*/
            /*padding: 0cm 1cm 1cm 1cm;*/
        }

        .sub-page {
            padding: 1cm;
            height: 35mm;
        }

        .page-margin {
            padding: 1cm 1cm 0cm 1cm;
        }

        .text-head {
            color: black;
            font-size: 35px;
            font-family: lato_medium, Arial;
            font-style: normal;
            font-weight: 400;
        }

        .text-highlight {
            letter-spacing: 0.00px;
            color: black;
            font-size: 15.00px;
            font-weight: 700;
            font-style: normal;
            font-family: lato_medium, Arial;
        }

        .text-normal-hyperlink {
            line-height: 35.00px;
            letter-spacing: 0.00px;
            color: rgba(39, 87, 149, 1);
            -webkit-text-stroke: unset;
            font-size: 15.00px;
            font-weight: 500;
            font-style: normal;
            font-family: lato_medium, Arial;
        }

        .text-normal,
        p,
        li {
            line-height: 22.00px;
            letter-spacing: 0.00px;
            color: black;
            -webkit-text-stroke: unset;
            font-size: 14.00px;
            font-weight: 500;
            font-style: normal;
            font-family: lato_medium, Arial;
            text-align: justify;
        }

        ol {
            padding-left: 1rem !important;
        }

        ul {
            padding-left: 0.5rem !important;
            list-style-type: "*";
        }

        p {
            margin: 0px !important;
            padding: 0px !important;
        }

        .text-title {
            color: black;
            font-size: 25px;
            font-family: lato_light, Arial;
            font-style: normal;
            font-weight: 100;
        }

        .text-normal-light {
            color: black;
            font-size: 16px;
            font-family: lato_light, Arial;
            font-style: normal;
            font-weight: 300;
        }

        .pb-3 {
            padding-bottom: 1rem !important;
        }

        .text-normal-link {
            color: rgba(39, 87, 149, 1);
            font-size: 16px;
            font-family: lato_medium, Arial;
            font-style: normal;
            font-weight: 100;
        }

        .notes-highlight {
            background-color: rgba(39, 87, 149, 0.1);
            padding: 1.5rem 4rem;
            margin-left: 10.5rem;
        }

        .notes-highlight1 {
            background-color: rgba(39, 87, 149, 0.1);
            padding: 1.5rem 4rem;
        }

        .wd1 {
            flex: 0 0 auto;
            width: 16.6666666667%;
        }

        .wd1 {
            flex: 0 0 auto;
            width: 16.6666666667%;
        }

        .wd2 {
            flex: 0 0 auto;
            width: 50%;
        }

        .wd3 {
            flex: 0 0 auto;
            width: 83.3333333333%;
        }

        .wd4 {
            flex: 0 0 auto;
            width: 41.6666666667%;
        }

        .wd5 {
            flex: 0 0 auto;
            width: 58.3333333333%;
        }

        .wd6 {
            flex: 0 0 auto;
            width: 8.3333333333%;
        }

        .wd7 {
            flex: 0 0 auto;
            width: 33.3333333333%;
        }

        .wd8 {
            flex: 0 0 auto;
            width: 50%;
        }

        .wd9 {
            flex: 0 0 auto;
            width: 50%;
        }

        hr {
            margin: 0.2rem 0rem;
        }

        .pl-3 {
            padding-left: 1.5rem;
        }


        @@page {
            size: A4;
            margin: 0;
        }

        @@media print {

            html,
            body {
                width: 220mm;
                height: 297mm;
                -webkit-print-color-adjust: exact;
            }

            .main-page {
                margin: 0;
                border: initial;
                border-radius: initial;
                width: initial;
                min-height: initial;
                box-shadow: initial;
                background: initial;
                page-break-after: always;
                padding: initial
            }
        }

        .contact td {
            min-width: 150px;
        }
    </style>

    <title>ESDAL</title>
</head>

<body style="overflow-y: auto;">
    <!-- main-content -->
    <div class="main-page">
        <div>
            <div style="text-align: end;padding-top: 1cm;padding-right: 2cm;">
                <img class="img-fluid" src="~/Content/assets/images/logo.png" width="120">
            </div>
        </div>
        <div class="text-normal-light pb-3" style="padding-left: 1cm;">
            FACSIMILE MESSAGE
        </div>
        <div class="notes-highlight1">
            <span class="text-head">Amendment to provisional route</span><br>
            <p class="text-normal-light">Classification: <span class="text-normal-link">special order</span></p>
        </div>
        <div>
            <br />
        </div>

    </div>


    <table style="width:100%">
        <tr>
            <td>
                <table>
                    <tr>
                        <td>
                            <table width="100%">
                                <tr>
                                    <td colspan="2" valign="top">
                                        <b>Operator:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @Model.HaulierDetails.HaulierName
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" valign="top">
                                        <b>Contact name:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @Model.HaulierDetails.HaulierContact
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" valign="top">
                                        <b>Address:</b>
                                    </td>
                                    <td colspan="3" valign="top">

                                        @foreach (var item in Model.HaulierDetails.HaulierAddress.Line)
                                        {
                                            <div>

                                                @item<br />
                                            </div>

                                        }

                                        @*<xsl:for-each select="ns1:HaulierDetails/ns2:HaulierAddress/ns4:Line">
                                            <xsl:if test=". != ''">
                                                <xsl:value-of select="." />
                                            </xsl:if>
                                            </div>
                                            </xsl:for-each>*@
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" valign="top">
                                        <b>Postcode:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @Model.HaulierDetails.HaulierAddress.PostCode
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td>
                            <table width="100%">
                                <tr>
                                    <td colspan="3" valign="top">
                                        <b>Telephone no:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @Model.HaulierDetails.TelephoneNumber
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="3" valign="top">
                                        <b>Fax no:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @Model.HaulierDetails.FaxNumber
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="3" valign="top">
                                        <b>Email address:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @Model.HaulierDetails.EmailAddress
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="3" valign="top">
                                        <b>Operator licence no:</b>
                                    </td>
                                    <td colspan="3" valign="top">
                                        @{
                                            if (Model.HaulierDetails.Licence.Contains("##**##"))
                                            {
                                                @Model.HaulierDetails.Licence.Substring(Model.HaulierDetails.Licence.LastIndexOf("##**##") + 1)

                                            }
                                            else
                                            {
                                                @Model.HaulierDetails.Licence
                                            }
                                        }

                                        @*<xsl:if test="contains(ns1:HaulierDetails/ns2:Licence, '##**##')">
                                                <xsl:value-of select="substring-after(ns1:HaulierDetails/ns2:Licence, '##**##')" />
                                            </xsl:if>

                                            <xsl:if test="contains(ns1:HaulierDetails/ns2:Licence, '##**##')=false()">
                                                <xsl:value-of select="ns1:HaulierDetails/ns2:Licence" />
                                            </xsl:if>*@
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="3" valign="top">
                                        <b>Operator reference no:</b>
                                    </td>
                                    <td colspan="3" valign="top">


                                        @{
                                            if (Model.HauliersReference.Contains("##**##"))
                                            {
                                                @Model.HauliersReference.Substring(Model.HauliersReference.LastIndexOf("##**##") + 1)

                                            }
                                            else
                                            {
                                                @Model.HauliersReference
                                            }
                                        }


                                        @*<xsl:if test="contains(ns1:HauliersReference, '##**##')">
                                                <xsl:value-of select="substring-after(ns1:HauliersReference, '##**##')" />
                                            </xsl:if>

                                            <xsl:if test="contains(ns1:HauliersReference, '##**##')=false()">
                                                <xsl:value-of select="ns1:HauliersReference" />
                                            </xsl:if>*@
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>


    <div class="page-margin" style="padding-left: 0px; padding-right: 50px;">
        <div class="textContents">

            <div class="pt-4">
                <p>
                    In pursuance of Part 2 or Part 4 of the above Order, I being the user of the under mentioned vehicle(s) to
                    which the Order applies, hereby give notice that it is my intention to use the said vehicle(s) on the roads specified
                    below.
                </p>
            </div>

            <table width="100%">
                <tr>
                    <td style="width: 175px;">
                        <b> From</b>
                    </td>
                    <td style="width: 175px;">
                        <b>Date and time</b>
                    </td>
                    <td style="width: 175px;">
                        <b>To</b>
                    </td>
                    <td style="width: 175px;">
                        <b>Date and time</b>
                    </td>
                </tr>
                <tr>
                    <td style="width: 175px;">

                        @{
                            if (Model.JourneyFromTo.From.Contains("##**##"))
                            {
                                @Model.JourneyFromTo.From.Substring(Model.JourneyFromTo.From.LastIndexOf("##**##") + 1)

                            }
                            else
                            {
                                @Model.JourneyFromTo.From
                            }
                        }

                        @*<xsl:if test="contains(ns1:JourneyFromTo/ns2:From, '##**##')">
                                <xsl:value-of select="substring-after(ns1:JourneyFromTo/ns2:From, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyFromTo/ns2:From, '##**##')=false()">
                                <xsl:value-of select="ns1:JourneyFromTo/ns2:From" />
                            </xsl:if>*@
                    </td>
                    <td style="width: 175px;">

                        @{

                            if (Model.JourneyTiming.FirstMoveDate != null)
                            {
                                @Model.JourneyTiming.FirstMoveDate

                            }
                            else
                            {
                                @*@Model.JourneyFromTo.From*@
                            }
                        }


                        @*<xsl:if test="contains(ns1:JourneyTiming/ns2:FirstMoveDate, '##**##')">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="substring-after(ns1:JourneyTiming/ns2:FirstMoveDate, '##**##')" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyTiming/ns2:FirstMoveDate, '##**##')=false()">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="ns1:JourneyTiming/ns2:FirstMoveDate" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>*@

                        @{
                            if (Model.JourneyTiming.StartTime.Contains("##**##"))
                            {
                                @Model.JourneyTiming.StartTime.Substring(Model.JourneyTiming.StartTime.LastIndexOf("##**##") + 1)

                            }
                            else
                            {
                                @Model.JourneyTiming.StartTime
                            }
                        }

                        @*<xsl:if test="contains(ns1:JourneyTiming/ns1:StartTime, '##**##')">
                                <xsl:value-of select="substring-after(ns1:JourneyTiming/ns1:StartTime, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyTiming/ns1:StartTime, '##**##')=false()">
                                <xsl:value-of select="ns1:JourneyTiming/ns1:StartTime" />
                            </xsl:if>*@
                    </td>
                    <td style="width: 175px;">

                        @{
                            if (Model.JourneyFromTo.To.Contains("##**##"))
                            {
                                @Model.JourneyFromTo.To.Substring(Model.JourneyFromTo.To.LastIndexOf("##**##") + 1)

                            }
                            else
                            {
                                @Model.JourneyFromTo.To
                            }
                        }

                        @*<xsl:if test="contains(ns1:JourneyFromTo/ns2:To, '##**##')">
                                <xsl:value-of select="substring-after(ns1:JourneyFromTo/ns2:To, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyFromTo/ns2:To, '##**##')=false()">
                                <xsl:value-of select="ns1:JourneyFromTo/ns2:To" />
                            </xsl:if>*@
                    </td>
                    <td style="width: 175px;">

                        @{
                            if (Model.JourneyTiming.LastMoveDate != null)
                            {
                                @Model.JourneyTiming.LastMoveDate

                            }
                        }

                        @*<xsl:if test="contains(ns1:JourneyTiming/ns2:LastMoveDate, '##**##')">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="substring-after(ns1:JourneyTiming/ns2:LastMoveDate, '##**##')" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyTiming/ns2:LastMoveDate, '##**##')=false()">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="ns1:JourneyTiming/ns2:LastMoveDate" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>*@



                        @{
                            if (Model.JourneyTiming.EndTime.Contains("##**##"))
                            {
                                @Model.JourneyTiming.EndTime.Substring(Model.JourneyTiming.EndTime.LastIndexOf("##**##") + 1)

                            }
                            else
                            {
                                @Model.JourneyTiming.EndTime
                            }
                        }


                        @*<xsl:if test="contains(ns1:JourneyTiming/ns1:EndTime, '##**##')">
                                <xsl:value-of select="substring-after(ns1:JourneyTiming/ns1:EndTime, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyTiming/ns1:EndTime, '##**##')=false()">
                                <xsl:value-of select="ns1:JourneyTiming/ns1:EndTime" />
                            </xsl:if>*@
                    </td>
                </tr>
                @{
                    string splitRouteDescription = "";
                    if (UnitType == 0 || UnitType == 692001)
                    {
                        if (Model.RouteParts != null)
                        {
                            if (Model.RouteParts.RoutePartListPosition.Route.Contains("##**##"))
                            {
                                splitRouteDescription = Model.RouteParts.RoutePartListPosition.Route.Substring(Model.RouteParts.RoutePartListPosition.Route.LastIndexOf("##**##") + 1);



                            }
                            else
                            {
                                splitRouteDescription = Model.RouteParts.RoutePartListPosition.Route;
                            }
                        }



                    }
                    else if (UnitType == 692002)
                    {
                        if (Model.RouteParts != null)
                        {
                            if (Model.RouteParts.RoutePartListPosition.RouteImperial.Contains("##**##"))
                            {
                                splitRouteDescription = Model.RouteParts.RoutePartListPosition.RouteImperial.Substring(Model.RouteParts.RoutePartListPosition.RouteImperial.LastIndexOf("##**##") + 1);

                            }
                            else
                            {
                                splitRouteDescription = Model.RouteParts.RoutePartListPosition.RouteImperial;
                            }
                        }

                    }

                }

                @{
                    string splitRouteDescriptionChange = "";
                    if (UnitType == 0 || UnitType == 692001)
                    {
                        if (Model.RouteParts != null)
                        {
                            if (Model.RouteParts.RoutePartListPosition.Route.Contains("##**##"))
                            {
                                splitRouteDescriptionChange = Model.RouteParts.RoutePartListPosition.Route.Substring(Model.RouteParts.RoutePartListPosition.Route.LastIndexOf("##**##") + 1);
                            }
                            else
                            {
                                splitRouteDescriptionChange = Model.RouteParts.RoutePartListPosition.Route;
                            }
                        }


                    }
                    else if (UnitType == 692002)
                    {
                        if (Model.RouteParts != null)
                        {
                            if (Model.RouteParts.RoutePartListPosition.RouteImperial.Contains("##**##"))
                            {
                                splitRouteDescriptionChange = Model.RouteParts.RoutePartListPosition.RouteImperial.Substring(Model.RouteParts.RoutePartListPosition.RouteImperial.LastIndexOf("##**##") + 1);

                            }
                            else
                            {
                                splitRouteDescriptionChange = Model.RouteParts.RoutePartListPosition.RouteImperial;
                            }

                        }

                    }

                }
                @*<xsl:variable name="splitRouteDescription">

                        <xsl:if test="$UnitType='' or $UnitType=692001">

                            <xsl:choose>
                                <xsl:when test="contains(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route, '##**##')">
                                    <xsl:variable name="valueLength" select="string-length(substring-before(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route, '##**##'))-1" />
                                    <xsl:call-template name="parseHtmlString">
                                        <xsl:with-param name="list" select="substring(substring-before(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route, '##**##'),1,$valueLength)" />
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:variable name="valueLength" select="string-length(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route)-1" />
                                    <xsl:call-template name="parseHtmlString">
                                        <xsl:with-param name="list" select="substring(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route,1,$valueLength)" />
                                    </xsl:call-template>
                                </xsl:otherwise>
                            </xsl:choose>

                        </xsl:if>

                        <xsl:if test="$UnitType=692002">

                            <xsl:choose>
                                <xsl:when test="contains(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial, '##**##')">
                                    <xsl:variable name="valueLength" select="string-length(substring-before(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial, '##**##'))-1" />
                                    <xsl:call-template name="parseHtmlString">
                                        <xsl:with-param name="list" select="substring(substring-before(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial, '##**##'),1,$valueLength)" />
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:variable name="valueLength" select="string-length(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial)-1" />
                                    <xsl:call-template name="parseHtmlString">
                                        <xsl:with-param name="list" select="substring(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial,1,$valueLength)" />
                                    </xsl:call-template>
                                </xsl:otherwise>
                            </xsl:choose>

                        </xsl:if>

                    </xsl:variable>*@
                @*<xsl:variable name="splitRouteDescriptionChange">

                        <xsl:if test="$UnitType='' or $UnitType=692001">

                            <xsl:choose>
                                <xsl:when test="contains(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route, '##**##')">
                                    <xsl:variable name="valueLength" select="string-length(substring-after(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route, '##**##'))-1" />
                                    <xsl:call-template name="parseHtmlString">
                                        <xsl:with-param name="list" select="substring(substring-after(ns1:RouteParts/ns2:RoutePartListPosition/ns2:Route, '##**##'),1,$valueLength)" />
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>

                        </xsl:if>

                        <xsl:if test="$UnitType=692002">

                            <xsl:choose>
                                <xsl:when test="contains(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial, '##**##')">
                                    <xsl:variable name="valueLength" select="string-length(substring-after(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial, '##**##'))-1" />
                                    <xsl:call-template name="parseHtmlString">
                                        <xsl:with-param name="list" select="substring(substring-after(ns1:RouteParts/ns2:RoutePartListPosition/ns2:RouteImperial, '##**##'),1,$valueLength)" />
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>

                        </xsl:if>
                    </xsl:variable>*@

                <tr>
                    <td colspan="4" valign="top">
                        <b>Route: </b>
                        <br />
                        <b>Leg 1 </b>

                        @{
                            if (Model.RouteParts != null)
                            {

                                if (Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.StartPointListPosition.StartPoint.Description != null)
                                {
                                    @Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.StartPointListPosition.StartPoint.Description

                                }
                                <b> or </b>
                                if (Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.EndPointListPosition.EndPoint.Description != null)
                                {
                                    @Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.EndPointListPosition.EndPoint.Description

                                }
                            }

                            @splitRouteDescription
                        }



                        @*<xsl:for-each select="ns1:RouteParts/ns2:RoutePartListPosition">

                                <xsl:variable name="OldNewValue" select="ns2:Route" />

                                <xsl:variable name="getPosition" select="position() + 1" />
                                <b>
                                    Leg <xsl:number /> :
                                </b>
                                <br />
                                <xsl:choose>
                                    <xsl:when test="contains(ns2:RoutePart/ns2:RoadPart/ns2:StartPointListPosition/ns2:StartPoint/ns5:Description, '##**##')">
                                        <xsl:value-of select="substring-after(ns2:RoutePart/ns2:RoadPart/ns2:StartPointListPosition/ns2:StartPoint/ns5:Description, '##**##')" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:choose>
                                            <xsl:when test="$arrayRouteDescriptionChange[$getPosition] != ''">
                                                <xsl:choose>
                                                    <xsl:when test="$arrayRouteDescription[$getPosition] = $arrayRouteDescriptionChange[$getPosition]">
                                                        <xsl:value-of select="ns2:RoutePart/ns2:RoadPart/ns2:StartPointListPosition/ns2:StartPoint/ns5:Description" />
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="ns2:RoutePart/ns2:RoadPart/ns2:StartPointListPosition/ns2:StartPoint/ns5:Description" />
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="ns2:RoutePart/ns2:RoadPart/ns2:StartPointListPosition/ns2:StartPoint/ns5:Description" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$arrayRouteDescriptionChange[$getPosition] != ''">
                                        <xsl:choose>
                                            <xsl:when test="$arrayRouteDescription[$getPosition] = $arrayRouteDescriptionChange[$getPosition]">
                                                to
                                            </xsl:when>
                                            <xsl:otherwise>
                                                to
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:when>
                                    <xsl:otherwise> to </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>
                                <xsl:choose>
                                    <xsl:when test="contains(ns2:RoutePart/ns2:RoadPart/ns2:EndPointListPosition/ns2:EndPoint/ns5:Description, '##**##')">
                                        <xsl:value-of select="substring-after(ns2:RoutePart/ns2:RoadPart/ns2:EndPointListPosition/ns2:EndPoint/ns5:Description, '##**##')" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:choose>
                                            <xsl:when test="$arrayRouteDescriptionChange[$getPosition] != ''">
                                                <xsl:choose>
                                                    <xsl:when test="$arrayRouteDescription[$getPosition] = $arrayRouteDescriptionChange[$getPosition]">
                                                        <xsl:value-of select="ns2:RoutePart/ns2:RoadPart/ns2:EndPointListPosition/ns2:EndPoint/ns5:Description" />
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="ns2:RoutePart/ns2:RoadPart/ns2:EndPointListPosition/ns2:EndPoint/ns5:Description" />
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="ns2:RoutePart/ns2:RoadPart/ns2:EndPointListPosition/ns2:EndPoint/ns5:Description" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>:
                                <xsl:choose>
                                    <xsl:when test="contains($OldNewValue, '##**##')">
                                        <xsl:choose>
                                            <xsl:when test="$arrayRouteDescription[$getPosition] = $arrayRouteDescriptionChange[$getPosition]">
                                                <xsl:value-of select="$arrayRouteDescription[$getPosition]" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="$arrayRouteDescriptionChange[$getPosition]" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:choose>
                                            <xsl:when test="$arrayRouteDescription[$getPosition] != ''">
                                                <xsl:value-of select="$arrayRouteDescription[$getPosition]" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="$arrayRouteDescriptionChange[$getPosition]" />
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="position() = last()">

                                    </xsl:when>
                                    <xsl:otherwise>
                                        <br />
                                        <table width="100%" cellpadding="0" cellspacing="0">
                                            <tr>
                                                <td style="border-top: 1px solid black"></td>
                                            </tr>
                                        </table>
                                    </xsl:otherwise>
                                </xsl:choose>

                            </xsl:for-each>*@
                    </td>
                </tr>

            </table>

            <table border="0" width="100%">
                <tr>
                    <td>
                        <b>  Notes On Escort: </b>
                    </td>
                </tr>
            </table>

            <table border="1" width="100%">
                <tr>
                    <td align="left" valign="top">
                        @Model.NotificationOnEscort
                    </td>
                </tr>
            </table>
            <br></br>
            <table border="0" width="100%">
                <tr>
                    <td>
                        <b>Notes supplied by haulier at time of notification: </b>
                    </td>
                </tr>
            </table>

            @if (Model.NotificationNotesFromHaulier != "")
            {
                <table border="1" width="100%">
                    <tr>


                        <td>
                            @if (Model.NotificationNotesFromHaulier.Contains("##**##"))
                            {
                                @Model.NotificationNotesFromHaulier.Substring(Model.NotificationNotesFromHaulier.LastIndexOf("##**##") + 1)
                            }
                            else
                            {
                                @Model.NotificationNotesFromHaulier
                            }
                        </td>


                    </tr>
                </table>
            }

            <table border="0" width="100%">
                <tr>
                    <td>
                        <b>Particulars of the load</b>
                    </td>
                </tr>
            </table>

            <table border="1" width="100%">
                <tr>
                    <td width="30%" valign="top">
                        <b> Description of load</b>
                    </td>
                    <td colspan="2" width="70%" valign="top">
                        @if (Model.LoadDetails.Description.Contains("##**##"))
                        {
                            @Model.LoadDetails.Description.Substring(Model.LoadDetails.Description.LastIndexOf("##**##") + 1)

                        }
                        else
                        {
                            @Model.LoadDetails.Description
                        }

                        @*<xsl:if test="contains(ns1:LoadDetails/ns2:Description, '##**##')">
                                <xsl:value-of select="substring-after(ns1:LoadDetails/ns2:Description, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:LoadDetails/ns2:Description, '##**##')=false()">
                                <xsl:value-of select="ns1:LoadDetails/ns2:Description" />
                            </xsl:if>*@
                    </td>
                </tr>
                <tr>
                    <td width="30%" valign="top">
                        <b> No. of movements</b>
                    </td>
                    <td colspan="2" width="70%" valign="top">
                        @if (Model.LoadDetails.TotalMoves != 0)
                        {
                            @Model.LoadDetails.TotalMoves

                        }
                        else
                        {
                            @Model.LoadDetails.TotalMoves
                        }

                        @*<xsl:if test="contains(ns1:LoadDetails/ns2:TotalMoves, '##**##')">
                                <xsl:value-of select="substring-after(ns1:LoadDetails/ns2:TotalMoves, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:LoadDetails/ns2:TotalMoves, '##**##')=false()">
                                <xsl:value-of select="ns1:LoadDetails/ns2:TotalMoves" />
                            </xsl:if>*@

                    </td>
                </tr>
                <tr>
                    <td width="30%" valign="top">
                        <b>No. of pieces moved at one time</b>
                    </td>
                    <td colspan="2" width="70%" valign="top">

                        @if (Model.LoadDetails.MaxPiecesPerMove != 0)
                        {
                            @Model.LoadDetails.MaxPiecesPerMove

                        }
                        else
                        {
                            @Model.LoadDetails.MaxPiecesPerMove
                        }

                        @*<xsl:if test="contains(ns1:LoadDetails/ns2:MaxPiecesPerMove, '##**##')">
                                <xsl:value-of select="substring-after(ns1:LoadDetails/ns2:MaxPiecesPerMove, '##**##')" />
                            </xsl:if>

                            <xsl:if test="contains(ns1:LoadDetails/ns2:MaxPiecesPerMove, '##**##')=false()">
                                <xsl:value-of select="ns1:LoadDetails/ns2:MaxPiecesPerMove" />
                            </xsl:if>*@
                    </td>
                </tr>
            </table>


            @{
                string PlateNoString = "";
                if (Model.RouteParts != null)
                {
                    var ConfigurationIdentity = Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.Vehicles.VehicleSummaryListPosition.VehicleSummary.ConfigurationIdentityListPosition.ConfigurationIdentity;

                    if (ConfigurationIdentity.PlateNo != "")
                    {

                        if (ConfigurationIdentity.PlateNo.Contains("##**##"))
                        {
                            PlateNoString = ConfigurationIdentity.PlateNo.Substring(ConfigurationIdentity.PlateNo.LastIndexOf("##**##") + 1);



                        }
                        else
                        {
                            PlateNoString = ConfigurationIdentity.PlateNo;
                        }
                    }

                    else
                    {
                        if (ConfigurationIdentity.FleetNo != null)
                        {
                            if (ConfigurationIdentity.FleetNo.ToString().Contains("##**##"))
                            {
                                PlateNoString = ConfigurationIdentity.FleetNo.ToString().Substring(ConfigurationIdentity.FleetNo.ToString().LastIndexOf("##**##") + 1);



                            }
                            else
                            {
                                PlateNoString = ConfigurationIdentity.FleetNo.ToString();
                            }
                        }


                    }
                }


            }







            <table border="0" width="100%">
                <tr>
                    <td>
                        <b>Details of the vehicle</b>
                    </td>
                </tr>
            </table>

            <table style="margin-left" width="100%" border="1" align="left">
                <tr>
                    <td valign="top">
                        <b>
                            Registration No. of vehicle or
                            substitute
                        </b>
                    </td>
                    <td valign="top">
                        <b>Type of vehicle</b>
                    </td>
                </tr>
                <tr>
                    <td width="10%" valign="top">
                        @PlateNoString.Substring(PlateNoString.LastIndexOf("or") + 1)

                        @*<xsl:value-of select="substring-after($PlateNoString,'or ')" />*@
                    </td>
                    <td width="40%" valign="top">

                        @{
                            var ConfigurationType = "";
                            if (Model.RouteParts != null)
                            {
                                ConfigurationType = Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.Vehicles.VehicleSummaryListPosition.VehicleSummary.ConfigurationType;
                            }

                        }
                        @ConfigurationType

                        @*<xsl:for-each select="ns1:RouteParts/ns2:RoutePartListPosition/ns2:RoutePart/ns2:RoadPart/ns2:Vehicles/ns3:VehicleSummaryListPosition">
                                <xsl:call-template name="CamelCase">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="ns3:VehicleSummary/ns3:ConfigurationType" />
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:if test="position() != last()"> or </xsl:if>
                            </xsl:for-each>*@
                    </td>
                </tr>
            </table>

            @{
                var ClassificationCategory = Model.Classification;
            }

            @{
                decimal RigidLengthListPositionString = 0;
                decimal OverallWidthListPositionString = 0;
                decimal OverallHeightListPositionString = 0;
                decimal OverallHeightListPositionReducibleHeightString = 0;
                decimal GrossWeightListPositionString = 0;
                decimal IncludingProjectionsString = 0;

                if (Model.RouteParts != null)
                {
                    var OverallLengthListPosition = Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.Vehicles.OverallLengthListPosition;
                    var Vehicles = Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.Vehicles;

                    if (OverallLengthListPosition.OverallLength.IncludingProjections != 0)
                    {
                        IncludingProjectionsString = OverallLengthListPosition.OverallLength.IncludingProjections;

                    }

                    var FrontOverhangListPositionString = Vehicles.FrontOverhangListPosition;
                    var RearOverhangListPositionString = Vehicles.RearOverhangListPosition;
                    var LeftOverhangListPositionString = Vehicles.LeftOverhangListPosition;
                    var RightOverhangListPositionString = Vehicles.RightOverhangListPosition;

                    RigidLengthListPositionString = Vehicles.RigidLengthListPosition.RigidLength;
                    OverallWidthListPositionString = Vehicles.OverallWidthListPosition.OverallWidth;
                    OverallHeightListPositionString = Vehicles.OverallHeightListPosition.OverallHeight.MaxHeight;
                    GrossWeightListPositionString = Vehicles.GrossWeightListPosition.GrossWeight.Weight;

                }







            }


            <br />
            <table border="1" width="100%">
                <tr>
                    <td valign="top">
                        <b>Overall length of vehicle</b>
                    </td>
                    <td valign="top">
                        <b>Projection - front</b>
                    </td>
                    <td valign="top">
                        <b>Projection - rear</b>
                    </td>
                    <td valign="top">
                        <b>Projection - left</b>
                    </td>
                    <td valign="top">
                        <b>Projection - right</b>
                    </td>
                    <td valign="top">
                        <b>Rigid length</b>
                    </td>
                    <td valign="top">
                        <b>Overall width of vehicle</b>
                    </td>
                    <td valign="top">
                        <b>Maximum height</b>
                    </td>
                    <td valign="top">
                        <b>Reducible height</b>
                    </td>
                    <td valign="top">
                        <b>Gross weight</b>
                    </td>
                </tr>
                <tr>
                    <td valign="top">
                        @if (IncludingProjectionsString != 0)
                        {
                            @IncludingProjectionsString
                        }
                        else
                        {
                            <label>--</label>
                        }

                        <!--TODO 1-->

                    </td>
                    <td valign="top">
                        <!--TODO 2-->
                        <label>--</label>

                    </td>
                    <td valign="top">
                        <!--TODO 3-->
                        <label>--</label>

                    </td>
                    <td valign="top">
                        <!--TODO Left-->
                        <label>--</label>

                    </td>
                    <td valign="top">
                        <!--TODO Right-->
                        <label>--</label>

                    </td>
                    <td valign="top">
                        @if (RigidLengthListPositionString != 0)
                        {
                            @RigidLengthListPositionString
                        }
                        else
                        {
                            <label>--</label>
                        }
                        <!--TODO 4-->

                    </td>
                    <td valign="top">

                        @if (OverallWidthListPositionString != 0)
                        {
                            @OverallWidthListPositionString
                        }
                        else
                        {
                            <label>--</label>
                        }
                        <!--TODO 5-->

                    </td>
                    <td valign="top">

                        @if (OverallHeightListPositionString != 0)
                        {
                            @OverallHeightListPositionString
                        }
                        else
                        {
                            <label>--</label>
                        }

                        <!--TODO 6-->

                    </td>
                    <td valign="top">

                        @if (OverallHeightListPositionReducibleHeightString != 0)
                        {
                            @OverallHeightListPositionReducibleHeightString
                        }
                        else
                        {
                            <label>--</label>
                        }
                        <!--TODO 7-->

                    </td>
                    <td valign="top">
                        <!--TODO 8-->
                        @if (GrossWeightListPositionString != 0)
                        {
                            @GrossWeightListPositionString
                        }
                        else
                        {
                            <label>--</label>
                        }

                    </td>
                </tr>
            </table>
            <!--TODO 2 ENd2-->
            <!--TODO 3-->
            <!--<xsl:choose>-->
            <!--For Semi Vehicles-->
            @{
                if (Model.RouteParts != null)
                {
                    var Configuration = Model.RouteParts.RoutePartListPosition.RoutePart.RoadPart.Vehicles.VehicleSummaryListPosition.VehicleSummary.Configuration;

                    if (Configuration.SemiVehicle != null)
                    {
                        if (Configuration.SemiVehicle.Summary != "")
                        {
                            <table border="0" width="100%">
                                <tr>
                                    <td valign="top">
                                        <b>
                                            @Configuration.SemiVehicle.Summary
                                            @*<xsl:choose>
                                                    <xsl:when test="contains(ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:Summary,'##**##')">
                                                        <xsl:value-of select="substring-after(ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:Summary,'##**##')" />
                                                    </xsl:when>
                                                    <xsl:when test="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:Summary != ''">
                                                        <xsl:value-of select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:Summary" />
                                                    </xsl:when>
                                                </xsl:choose>*@
                                        </b>
                                    </td>
                                </tr>
                            </table>

                            <table border="1" width="100%">
                                <tr>
                                    <td width="25%" valign="top">
                                        <b>Gross weight (kg) </b>
                                    </td>
                                    <td colspan="2" width="75%" valign="top">
                                        @Configuration.SemiVehicle.Summary kg

                                        @*<xsl:choose>
                                                <xsl:when test="contains(ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:GrossWeight/ns3:Weight, '##**##')">
                                                    <xsl:if test="substring-after(ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:GrossWeight/ns3:Weight, '##**##') != ''">
                                                        <xsl:value-of select="substring-after(ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:GrossWeight/ns3:Weight, '##**##')" />
                                                        <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>kg
                                                    </xsl:if>
                                                </xsl:when>

                                                <xsl:when test="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:GrossWeight/ns3:Weight != ''">
                                                    <xsl:value-of select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:GrossWeight/ns3:Weight" />
                                                    <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>kg
                                                </xsl:when>
                                            </xsl:choose>*@
                                    </td>
                                </tr>
                                <tr>
                                    <td width="25%" valign="top">
                                        <b>
                                            No. of Wheels
                                            (Wheels OR wheels x no of axles)
                                        </b>
                                    </td>
                                    <td colspan="2" width="75%" valign="top">
                                        @{
                                            var WheelsPerAxle1 = "";
                                        }
                                        @foreach (var item in Configuration.SemiVehicle.AxleConfiguration.WheelsPerAxleListPosition)
                                        {
                                            WheelsPerAxle1 += item.WheelsPerAxle.AxleCount + " * " + item.WheelsPerAxle.Value + " , ";
                                        }
                                        @WheelsPerAxle1
                                        <!--For Semi Vehicle Starts Here-->
                                        <!--<xsl:variable name="WheelsPerAxle1">
                                        <xsl:if test="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:WheelsPerAxleListPosition/ns3:WheelsPerAxle != ''">
                                            <xsl:variable name="myConcatString">
                                                <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:WheelsPerAxleListPosition">
                                                    **#<xsl:value-of select="position()" /><xsl:value-of select="position()" />#**-->
                                        <!--Chirag=-->
                                        <!--<xsl:choose>
                                            <xsl:when test="contains(ns3:WheelsPerAxle, '##**##')">
                                                <xsl:if test="substring-before(ns3:WheelsPerAxle, '##**##') != ''">
                                                    <xsl:value-of select="substring-before(ns3:WheelsPerAxle, '##**##')" />
                                                </xsl:if>
                                                <xsl:if test="substring-before(ns3:WheelsPerAxle, '##**##') =false()">
                                                    0
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="ns3:WheelsPerAxle != ''">
                                                    <xsl:value-of select="ns3:WheelsPerAxle" />
                                                </xsl:if>
                                                <xsl:if test="ns3:WheelsPerAxle =false()">
                                                    0
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:text> x </xsl:text>



                                        **#<xsl:value-of select="position()" />#**-->
                                        <!--Chirag=-->
                                        <!--</xsl:for-each>
                                                </xsl:variable>
                                                <xsl:variable name="valueLength" select="string-length($myConcatString)-1" />
                                                <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:WheelsPerAxleListPosition">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**'))">
                                                            <xsl:variable name="SubstringOfMainString" select="substring-before(substring-after(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**')),concat('**#',position(),'#**'))" />
                                                            <xsl:choose>
                                                                <xsl:when test="contains($SubstringOfMainString, '**##**')">
                                                                    <xsl:value-of select="substring-after($SubstringOfMainString, '**##**')" />
                                                                    <xsl:if test="position() != last()">, </xsl:if>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:value-of select="$SubstringOfMainString" />
                                                                    <xsl:if test="position() != last()">, </xsl:if>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </xsl:if>
                                        </xsl:variable>-->
                                        <!--For Semi Vehicle Ends Here-->
                                        <!--Add business logic to check for the length and assign comma at the end-->
                                        @*<xsl:if test="string-length($WheelsPerAxle1) > 0">
                                                <xsl:value-of select="$WheelsPerAxle1" />
                                            </xsl:if>*@
                                        <!--Logic ends here-->

                                    </td>
                                </tr>

                                @if (ClassificationCategory != "Wheeled construction and use")
                                {
                                    <tr>
                                        <td width="25%" valign="top">
                                            <b>Axle weight (kg) </b>
                                        </td>
                                        <td colspan="2" width="75%" valign="top">

                                            @{
                                                var AxleWeight1 = "";
                                            }
                                            @foreach (var item in Configuration.SemiVehicle.AxleConfiguration.AxleWeightListPosition)
                                            {
                                                AxleWeight1 += item.AxleWeight.Value + "kg * " + item.AxleWeight.AxleCount + " , ";
                                            }
                                            @AxleWeight1

                                            <!--For Semi Vehicle Starts Here-->
                                            <!--<xsl:variable name="AxleWeight1">
                                            <xsl:if test="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleWeightListPosition/ns3:AxleWeight != ''">
                                                <xsl:variable name="myConcatString">
                                                    <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleWeightListPosition">
                                                        **#<xsl:value-of select="position()" /><xsl:value-of select="position()" />#**-->
                                            <!--Chirag=-->
                                            <!--<xsl:choose>
                                                <xsl:when test="contains(ns3:AxleWeight, '##**##')">
                                                    <xsl:if test="substring-before(ns3:AxleWeight, '##**##') != ''">
                                                        <xsl:value-of select="substring-before(ns3:AxleWeight, '##**##')" /> kg
                                                    </xsl:if>
                                                    <xsl:if test="substring-before(ns3:AxleWeight, '##**##') =false()">
                                                        0 kg
                                                    </xsl:if>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:if test="ns3:AxleWeight != ''">
                                                        <xsl:value-of select="ns3:AxleWeight" /> kg
                                                    </xsl:if>
                                                    <xsl:if test="ns3:AxleWeight =false()">
                                                        0 kg
                                                    </xsl:if>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:text> x </xsl:text>

                                            **#<xsl:value-of select="position()" />#**-->
                                            <!--Chirag=-->
                                            <!--</xsl:for-each>
                                            </xsl:variable>

                                            <xsl:variable name="valueLength" select="string-length($myConcatString)-1" />

                                            <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleWeightListPosition">
                                                <xsl:choose>
                                                    <xsl:when test="contains(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**'))">
                                                        <xsl:variable name="SubstringOfMainString" select="substring-before(substring-after(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**')),concat('**#',position(),'#**'))" />
                                                        <xsl:choose>
                                                            <xsl:when test="contains($SubstringOfMainString, '**##**')">-->
                                            <!--<strike>
                                              <xsl:value-of select="substring-before($SubstringOfMainString, '**##**')"/>
                                            </strike>
                                            <xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text>-->
                                            <!--<u>
                                            <b>-->
                                            <!--<xsl:value-of select="substring-after($SubstringOfMainString, '**##**')" />-->
                                            <!--</b>
                                            </u>-->
                                            <!--<xsl:if test="position() != last()">, </xsl:if>
                                                                    </xsl:when>
                                                                    <xsl:otherwise>
                                                                        <xsl:value-of select="$SubstringOfMainString" />
                                                                        <xsl:if test="position() != last()">, </xsl:if>
                                                                    </xsl:otherwise>
                                                                </xsl:choose>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </xsl:if>
                                            </xsl:variable>-->
                                            <!--For Semi Vehicle Ends Here-->
                                            <!--Add business logic to check for the length and assign comma at the end-->
                                            @*<xsl:if test="string-length($AxleWeight1) > 0">
                                                    <xsl:value-of select="$AxleWeight1" />
                                                </xsl:if>*@
                                            <!--Logic ends here-->
                                        </td>
                                    </tr>
                                }

                                @*<xsl:if test="$ClassificationCategory != 'Wheeled construction and use'">

                                    </xsl:if>*@
                                <tr>
                                    <td width="25%" valign="top">
                                        <b>Axle spacing (m) </b>
                                    </td>
                                    <td colspan="2" width="75%" valign="top">

                                        @{
                                            var AxleSpacing1 = "";
                                        }
                                        @foreach (var item in Configuration.SemiVehicle.AxleConfiguration.AxleSpacingListPosition)
                                        {
                                            AxleSpacing1 += item.AxleSpacing.Value + "m * " + item.AxleSpacing.AxleCount + " , ";
                                        }
                                        @AxleSpacing1

                                        <!--For Semi Vehicle Starts Here-->
                                        <!--<xsl:variable name="AxleSpacing1">
                                        <xsl:if test="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleSpacingListPosition/ns3:AxleSpacing != ''">
                                            <xsl:variable name="myConcatString">
                                                <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleSpacingListPosition">
                                                    **#<xsl:value-of select="position()" /><xsl:value-of select="position()" />#**-->
                                        <!--Chirag=-->
                                        <!--<xsl:choose>
                                            <xsl:when test="contains(ns3:AxleSpacing, '##**##')">
                                                <xsl:if test="substring-before(ns3:AxleSpacing, '##**##') != ''">
                                                    <xsl:if test="$UnitType='' or $UnitType=692001">
                                                        <xsl:value-of select="substring-before(ns3:AxleSpacing, '##**##')" /> m
                                                    </xsl:if>

                                                    <xsl:if test="$UnitType=692002">
                                                        <xsl:call-template name="ConvertToFeetNoOR">
                                                            <xsl:with-param name="pText" select="substring-before(ns3:AxleSpacing, '##**##')"></xsl:with-param>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:if>
                                                <xsl:if test="substring-before(ns3:AxleSpacing, '##**##') =false()">
                                                    -
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="ns3:AxleSpacing != ''">
                                                    <xsl:if test="$UnitType='' or $UnitType=692001">
                                                        <xsl:value-of select="ns3:AxleSpacing" /> m
                                                    </xsl:if>

                                                    <xsl:if test="$UnitType=692002">
                                                        <xsl:call-template name="ConvertToFeetNoOR">
                                                            <xsl:with-param name="pText" select="ns3:AxleSpacing"></xsl:with-param>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:if>
                                                <xsl:if test="ns3:AxleSpacing =false()">
                                                    -
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:text> x </xsl:text>


                                        **#<xsl:value-of select="position()" />#**-->
                                        <!--Chirag=-->
                                        <!--</xsl:for-each>
                                                </xsl:variable>

                                                <xsl:variable name="valueLength" select="string-length($myConcatString)-1" />

                                                <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleSpacingListPosition">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**'))">
                                                            <xsl:variable name="SubstringOfMainString" select="substring-before(substring-after(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**')),concat('**#',position(),'#**'))" />
                                                            <xsl:choose>
                                                                <xsl:when test="contains($SubstringOfMainString, '**##**')">
                                                                    <xsl:value-of select="substring-after($SubstringOfMainString, '**##**')" />
                                                                    <xsl:if test="position() != last()">, </xsl:if>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:value-of select="$SubstringOfMainString" />
                                                                    <xsl:if test="position() != last()">, </xsl:if>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </xsl:if>
                                        </xsl:variable>-->
                                        <!--For Semi Vehicle Ends Here-->
                                        <!--Add business logic to check for the length and assign comma at the end-->
                                        @*<xsl:if test="string-length($AxleSpacing1) > 0">
                                                <xsl:value-of select="$AxleSpacing1" />
                                            </xsl:if>*@
                                        <!--Logic ends here-->
                                    </td>
                                </tr>
                                <tr>
                                    <td width="25%" valign="top">
                                        <b>Axle Spacing To Following (m)</b>
                                    </td>
                                    <td colspan="2" width="75%" valign="top">
                                        @Configuration.SemiVehicle.AxleConfiguration.AxleSpacingToFollowing.AxleSpacingToFollow m


                                        <!--For Semi Vehicle Starts Here-->
                                        <!--<xsl:variable name="AxleSpacingToFollow">
                                        <xsl:if test="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleSpacingToFollowing/ns3:AxleSpacingToFollow != ''">
                                            <xsl:variable name="myConcatString">
                                                <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleSpacingToFollowing">
                                                    **#<xsl:value-of select="position()" /><xsl:value-of select="position()" />#**-->
                                        <!--Chirag=-->
                                        <!--<xsl:choose>
                                            <xsl:when test="contains(ns3:AxleSpacingToFollow, '##**##')">
                                                <xsl:if test="substring-before(ns3:AxleSpacingToFollow, '##**##') != ''">
                                                    <xsl:if test="$UnitType='' or $UnitType=692001">
                                                        <xsl:value-of select="substring-before(ns3:AxleSpacingToFollow, '##**##')" /> m
                                                    </xsl:if>

                                                    <xsl:if test="$UnitType=692002">
                                                        <xsl:call-template name="ConvertToFeetNoOR">
                                                            <xsl:with-param name="pText" select="substring-before(ns3:AxleSpacingToFollow, '##**##')"></xsl:with-param>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:if>
                                                <xsl:if test="substring-before(ns3:AxleSpacingToFollow, '##**##') =false()">
                                                    -
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="ns3:AxleSpacingToFollow != ''">
                                                    <xsl:if test="$UnitType='' or $UnitType=692001">
                                                        <xsl:value-of select="ns3:AxleSpacingToFollow" /> m
                                                    </xsl:if>

                                                    <xsl:if test="$UnitType=692002">
                                                        <xsl:call-template name="ConvertToFeetNoOR">
                                                            <xsl:with-param name="pText" select="ns3:AxleSpacingToFollow"></xsl:with-param>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:if>
                                                <xsl:if test="ns3:AxleSpacingToFollow =false()">
                                                    -
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>

                                        <xsl:choose>
                                            <xsl:when test="contains(ns3:AxleSpacingToFollow, '##**##')">
                                                <xsl:text>**##**</xsl:text>
                                                <xsl:choose>
                                                    <xsl:when test="contains(ns3:AxleSpacingToFollow, '##**##')">
                                                        <xsl:if test="substring-after(ns3:AxleSpacingToFollow, '##**##') != ''">
                                                            <xsl:value-of select="substring-after(ns3:AxleSpacingToFollow, '##**##')" /> m
                                                        </xsl:if>
                                                        <xsl:if test="substring-after(ns3:AxleSpacingToFollow, '##**##') =false()">
                                                            -
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="ns3:AxleSpacingToFollow" /> m
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        **#<xsl:value-of select="position()" />#**-->
                                        <!--Chirag=-->
                                        <!--</xsl:for-each>
                                                </xsl:variable>

                                                <xsl:variable name="valueLength" select="string-length($myConcatString)-1" />

                                                <xsl:for-each select="ns3:VehicleSummary/ns3:Configuration/ns3:SemiVehicle/ns3:AxleConfiguration/ns3:AxleSpacingToFollowing">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**'))">
                                                            <xsl:variable name="SubstringOfMainString" select="substring-before(substring-after(substring($myConcatString,1,$valueLength), concat('**#',position(),position(),'#**')),concat('**#',position(),'#**'))" />
                                                            <xsl:choose>
                                                                <xsl:when test="contains($SubstringOfMainString, '**##**')">
                                                                    <xsl:value-of select="substring-after($SubstringOfMainString, '**##**')" />
                                                                    <xsl:if test="position() != last()">, </xsl:if>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:value-of select="$SubstringOfMainString" />
                                                                    <xsl:if test="position() != last()">, </xsl:if>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </xsl:if>
                                        </xsl:variable>-->
                                        <!--For Semi Vehicle Ends Here-->
                                        <!--Add business logic to check for the length and assign comma at the end-->
                                        @*<xsl:if test="string-length($AxleSpacingToFollow) > 0">
                                                <xsl:value-of select="$AxleSpacingToFollow" />
                                            </xsl:if>*@
                                        <!--Logic ends here-->
                                    </td>
                                </tr>
                            </table>

                        }
                    }
                }
            }

            <!--For Semi Vehicles Ends here-->
            <!--For Non Semi Vehicles-->
            <!--For Non Semi Vehicles Ends here-->
            <!--For Tracked Vehicles-->
            <!--For Tracked Vehicles Ends here-->
            <!--</xsl:choose>-->
            <!--TODO 3 ENd-->

            <table border="0" width="100%">
                <tr>
                    <td colspan="70">
                        <b>Form of Indemnity</b>
                    </td>
                </tr>
                <tr>
                    <td colspan="70">
                        <b>
                            THE INDEMNITY
                        </b>
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        1.
                    </td>
                    <td colspan="68">
                        we @Model.HaulierDetails.HaulierName agree to indemnify you @Model.OrganisationName in respect of any damage that is caused in the course of a journey of which
                        you have been notified under the Road Vehicles (Authorisation of Special Types)(General) Order 2003 (which is
                        referred to below as "the 2003 Order").



                        @*We<xsl:text disable-output-escaping="yes"><![CDATA[&nbsp;]]></xsl:text><xsl:value-of select="ns1:HaulierDetails/ns2:HaulierName" />
                            <xsl:if test="ns1:OnBehalfOf">
                                (on behalf of
                                <xsl:choose>
                                    <xsl:when test="contains(ns1:OnBehalfOf, '##**##')">
                                        <xsl:value-of select="substring-after(ns1:OnBehalfOf, '##**##')" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="ns1:OnBehalfOf" />
                                    </xsl:otherwise>
                                </xsl:choose>)
                            </xsl:if>
                            agree to indemnify
                            you <xsl:value-of select="$OrganisationName" />, in respect of any damage that is caused in the course of a journey of which
                            you have been notified under the Road Vehicles (Authorisation of Special Types)(General) Order 2003 (which is
                            referred to below as "the 2003 Order").*@

                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        2.
                    </td>
                    <td colspan="68">
                        This indemnity relates to the journey scheduled to take place between @Model.JourneyTiming.FirstMoveDate and @Model.JourneyTiming.LastMoveDate starting with the date on which the indemnity was signed.


                        @*<xsl:if test="contains(ns1:JourneyTiming/ns2:FirstMoveDate, '##**##')">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="substring-after(ns1:JourneyTiming/ns2:FirstMoveDate, '##**##')" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyTiming/ns2:FirstMoveDate, '##**##')=false()">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="ns1:JourneyTiming/ns2:FirstMoveDate" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>
                            and*@
                        @*<xsl:if test="contains(ns1:JourneyTiming/ns2:LastMoveDate, '##**##')">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="substring-after(ns1:JourneyTiming/ns2:LastMoveDate, '##**##')" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>

                            <xsl:if test="contains(ns1:JourneyTiming/ns2:LastMoveDate, '##**##')=false()">
                                <xsl:element name="newdate">
                                    <xsl:call-template name="FormatDate">
                                        <xsl:with-param name="DateTime" select="ns1:JourneyTiming/ns2:LastMoveDate" />
                                    </xsl:call-template>
                                </xsl:element>
                            </xsl:if>*@
                    </td>
                </tr>
                <tr>
                    <td colspan="70">
                        <b>
                            The damage covered:
                        </b>
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        3.
                    </td>
                    <td colspan="68">
                        Except as stated in paragraph 4, the damage in respect of which this indemnity is given is limited to any
                        damage caused to any road or bridge for the maintenance of which you are responsible.
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        4.
                    </td>
                    <td colspan="68">
                        This indemnity also extends to any damage caused to any other road or bridge that is used in the course of
                        any journey to which the indemnity relates, in any case where a separate indemnity required by the 2003 Order
                        has not been given to, or received by, the authority, body or person ("third party") which is responsible for the
                        maintenance of that other road or bridge.
                    </td>
                </tr>
                <tr>
                    <td colspan="70">
                        <b>
                            The cause of damage:
                        </b>
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        5.
                    </td>
                    <td colspan="68">
                        The damage covered in this indemnity is limited to damage caused by - (a) the construction of any vehicle
                        used; (b) the weight transmitted to the road surface by any vehicle used; (c) the dimensions, distribution or
                        adjustment of the load carried on any vehicle used in the carriage of an abnormal indivisible load; (d) any vehicle
                        other than the vehicle used in any case where that damage results from the vehicle used (but excluding any
                        damage caused, or contributed to, by the negligence of the driver of the other vehicle).
                    </td>
                </tr>
                <tr>
                    <td colspan="70">
                        <b>
                            Enforcement of indemnity:
                        </b>
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        6.
                    </td>
                    <td colspan="68">
                        This indemnity is enforceable by you, to the extent of the damage specified in paragraph 3.
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        7.
                    </td>
                    <td colspan="68">
                        This indemnity is enforceable by any third party referred to in paragraph 4, in its own right, to the extent of any
                        damage caused to any road or bridge for the maintenance of which it is responsible (but only if it has not already
                        recovered payment in respect of that damage by virtue of a claim made by it under the equivalent provision in
                        another indemnity given under the 2003 Order).
                    </td>
                </tr>
                <tr>
                    <td valign="top" colspan="2">
                        8.
                    </td>
                    <td colspan="68">
                        A claim in respect of damage covered by this indemnity will only be entertained if the claim - (a) states the
                        occasion and place of the damage; and (b) is made before the end of the period of 12 months starting with the
                        date on which the vehicle was last used in the course of the journey during which the damage occurred.

                    </td>
                </tr>
            </table>



            <table width="100%">
                <tr>
                    <td width="60%">
                        <b>
                            Date:
                        </b>
                        @Model.SentDateTime


                    </td>
                    <td width="40%">
                        <b>Signed:</b>
                        @Model.HaulierDetails.HaulierContact

                    </td>
                </tr>
            </table>



        </div>


    </div>


    <!-- end of main-content -->
    <!-- bootstrap css for vertical menu -->
    <script src="~/Scripts/Common/bootstrap-5.0.0-beta2.bundle.min.js?V@(Session["ProjectVersion"])"></script>
</body>

</html>
<script src="~/Scripts/CspJs/Movements/AgreedRouteV.js?V@(Session["ProjectVersion"])"></script>
