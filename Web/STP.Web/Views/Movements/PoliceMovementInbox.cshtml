@using PagedList.Mvc
@using STP.Domain.SecurityAndUsers
@using STP.Domain.MovementsAndNotifications.Movements
@using STP.Common.EncryptDecrypt

@model PagedList.IPagedList<STP.Domain.MovementsAndNotifications.Movements.MovementsInbox>

@{
    int listCount = 0;
    listCount = (int)Session["PageSize"];
    int pageSize = 10;
    int str_id = 0;
    string str_ESRN = "", str_nm = "";
    int pageNum = ViewBag.pageNum;
    int colspan = 7;

    if (ViewBag.pageSize != null)
    {
        pageSize = ViewBag.pageSize;
    }
    
    int presetFilter = ViewBag.SortType;
    str_id = ViewBag.structureID;
    str_ESRN = ViewBag.ESRN;
    str_nm = ViewBag.StructureNm;
    List<STP.Domain.Structures.DropDown> delegationArrange = ViewBag.DelegateArrange;

    UserInfo ObjUserInfo = (UserInfo)Session["UserInfo"];

    var objMovementsInboxFilter = (MovementsInboxFilter)ViewBag.V_objMovementsInboxFilter;
    var objMovementsInboxAdvancedFilter = (MovementsInboxAdvancedFilter)ViewBag.V_objMovementsInboxAdvancedFilter;
    var movementsInboxFilter = (MovementsInboxFilter)ViewBag.MovementsInboxFilter;
    var movementsInboxAdvancedFilter = (MovementsInboxAdvancedFilter)ViewBag.MovementsAdvancedFilter;

}

@Html.Hidden("str_idVal", str_id)
@Html.Hidden("str_ESRNVal", str_ESRN)
@Html.Hidden("str_nmVal", str_nm)
@Html.Hidden("hdnModel", null)
@Html.Hidden("hdnLoginUserID", ObjUserInfo.UserId)
<style>
    .statusinline {
        display: inline-flex;
    }

    .filtered-icon {
        background: url('../../Content/assets/Icons/filtered.svg') no-repeat center 90% #2b5795;
        background-size: 1rem;
    }

    .esdal-filter-icon {
        background: url('../../Content/assets/Icons/filtered.svg') no-repeat center 0 #2b5795;
        background-size: 1rem;
        width: 20px;
        height: 20px;
        display: inline-block;
        position: absolute;
        margin-left: 3px;
    }

    .movements td:nth-child(1) {
        text-align: left;
    }

    .filter-table-icon {
        position: absolute;
        bottom: -13px;
        -webkit-transform: translateX(-50%) translateY(-50%);
        -moz-transform: translateX(-50%) translateY(-50%);
        transform: translateX(-50%) translateY(-50%);
        left: 19px;
    }

    .filter-table-icons {
        position: absolute;
        bottom: -13px;
        -webkit-transform: translateX(-50%) translateY(-50%);
        -moz-transform: translateX(-50%) translateY(-50%);
        transform: translateX(-50%) translateY(-50%);
        left: 19px;
    }

    .highlight-row-bold {
        font-weight: bold;
    }

    .highlight-row-color {
        background-color: #F7F0E5;
        border-bottom-color: #FFF;
        border-bottom-width: 1px;
    }
</style>

<div id="div_deleg">
    @foreach (var data in delegationArrange)
    {
        <input type="hidden" value="@data.Value" />
    }
</div>
<!-- table -->
<div id="forpagination">
    <div class="main-table movements esdal-table" id="portal-table">
        @Html.Hidden("pageNum", pageNum)
        @Html.Hidden("pageSizeVal", pageSize)
        @if (ViewBag.IsRelatedMov == true)
        {
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>ESDAL Reference</th>
                        <th>Type<span class="typeimg"><img src="~/Content/assets/images/down-chevlon.svg" width="15" height="6"></span></th>
                        <th>Work Status</th>
                        <th>Project Status</th>
                        <th>Owner</th>
                        <th>Application Date</th>
                        <th>Due Date</th>
                        <th>Move From</th>
                        <th>Move To</th>
                        <th class="table-filter-header">
                            <img id="imgopenfilters" class="open-filter-icon-common" data-width="680" src="~/Content/assets/images/filter-icon.svg" title="Open filter" width="38">

                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Count > 0)
                    {
                        foreach (var item in Model)
                        {

                            string movementType = item.Type;
                            if (!string.IsNullOrEmpty(movementType))
                            {
                                movementType = movementType.ToLower();
                            }
                            string moveTypeToDisplay = string.Empty;
                            <tr>
                                <td></td>
                                <td class="text-color2"><a href="#" class="text-decoration-link strurelatedmov" data-VAnalysisId=0 data-VPrj_Status="@item.ProjectStatus" data-Vhauliermnemonic="@item.HaulierMnemonic" data-Vesdalref="@item.ESDALRefNum" data-Vprojectid="@item.ProjectId">@item.ESDALReference</a></td>
                                <td class="text-color1"> @moveTypeToDisplay</td>
                                <td class="text-color1">
                                    @{
                                        switch (item.WorkStatus)
                                        {
                                            case 301001:
                                                <span> Not checking</span>
                                                break;
                                            case 301002:
                                                if (item.CheckerName != null && item.CheckerName != "")
                                                {
                                                    <span> Checking (@item.CheckerName)</span>
                                                }
                                                else
                                                {
                                                    <span> Checking</span>
                                                }
                                                break;
                                            case 301003:
                                                <span> Checked+ </span>
                                                break;
                                            case 301004:
                                                <span> Checked-</span>
                                                break;
                                            case 301005:
                                                if (item.CheckerName != null && item.CheckerName != "")
                                                {
                                                    <span> Checking final (@item.CheckerName)</span>
                                                }
                                                else
                                                {
                                                    <span> Checking final</span>
                                                }
                                                break;
                                            case 301006:
                                                <span> Checked final+</span>
                                                break;
                                            case 301007:
                                                <span> Checked final-</span>
                                                break;
                                            case 301008:
                                                if (item.CheckerName != null && item.CheckerName != "")
                                                {
                                                    <span> QA Checking (@item.CheckerName)</span>
                                                }
                                                else
                                                {
                                                    <span> QA Checking</span>
                                                }
                                                break;
                                            case 301009:
                                                <span> QA Checked+ </span>
                                                break;
                                            case 301010:
                                                <span> QA Checked-</span>
                                                break;
                                            case 0:
                                                break;
                                            default:
                                                break;


                                        }
                                    }
                                </td>
                                <td class="text-color1">
                                    @switch (item.ProjectStatus)
                                    {
                                        case 307001:
                                            <img src="~/Content/assets/images/cancelled.svg"  title="Unallocated" width="25">
                                            break;
                                        case 307002:
                                            <img src="~/Content/assets/images/WIP-icon.svg"  title="In progress" width="25">
                                            break;
                                        case 307003:
                                            <img src="~/Content/assets/images/up-arrow.svg"  title="Proposed" width="25">
                                            break;
                                        case 307004:
                                            <img src="~/Content/assets/images/up-arrow.svg"   title="Re-proposed" width="25">
                                            break;
                                        case 307005:
                                            <img src="~/Content/assets/images/completed.svg"  title="Agreed" width="25">
                                            break;
                                        case 307006:
                                            <img src="~/Content/assets/Icons/agreed-reproposed.svg"  title="Agreed revised" width="25">
                                            break;
                                        case 307007:
                                            <img src="~/Content/assets/Icons/agreed-recleared.svg"  title="Agreed recleared" width="25">
                                            break;
                                        case 307008:
                                            /*dummy*/
                                            <img src="~/Content/assets/images/withdrawn.svg"  title="Withdrawn" width="25">
                                            break;
                                        case 307009:
                                            <img src="~/Content/assets/Icons/declined.svg"  title="Declined" width="25">
                                            break;
                                        case 307010:
                                            /*dummy*/
                                            <img src="~/Content/assets/images/pending.svg"  title="Historic" width="25">
                                            break;
                                        case 307011:
                                            <img src="~/Content/assets/images/up-arrow.svg"  title="Revised" width="25">
                                            break;
                                        case 307012:
                                            <img src="~/Content/assets/images/WIP-icon.svg"   title="Agreement work in progress" width="25">
                                            break;
                                        case 307014:
                                            <img src="~/Content/assets/Icons/new-planned.svg"  title="Planned" width="25">
                                            break;
                                        case 307016:
                                            <img src="~/Content/assets/images/completed.svg"  title="Approved" width="25">
                                            break;
                                    }

                                </td>
                                <td class="text-color1">@item.Owner</td>
                                <td class="text-color1"> @item.ApplicationDate</td>
                                <td class="text-color1">
                                    @if (item.Days > 0 && item.Days <= 14)
                                    {
                                        <span style="background-color:red; color:white">
                                            @item.DueDate
                                        </span>
                                    }
                                    else
                                    {
                                        <span>
                                            @item.DueDate
                                        </span>
                                    }
                                </td>
                                <td> @item.MoveFrom</td>
                                <td  colspan="2"> @item.MoveTo</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td style="text-align: center" class="no-records-found" colspan="9">
                                <span style="color: red">No records found</span>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {

            var isshowRecentVersion = movementsInboxFilter.ShowMostRecentVersion;
            var isincludehistoricaldata = movementsInboxFilter.IncludeHistorical;
            var isesdalstructurerefenabled = !string.IsNullOrEmpty(movementsInboxFilter.StructureReferenceNo);
            var issuitabilityenabled = movementsInboxFilter.Suitable || movementsInboxFilter.UnSuitable || movementsInboxFilter.MarginallySuitable;
            var isstartenabled = !string.IsNullOrEmpty(movementsInboxFilter.StartPoint);
            var isendenabled = !string.IsNullOrEmpty(movementsInboxFilter.EndPoint);
            var isVehicledimension = !string.IsNullOrEmpty(movementsInboxFilter.QueryString);
            var isstartorendenabled = !string.IsNullOrEmpty(movementsInboxFilter.StartOrEnd);
            var ishaulierrefenabled = !string.IsNullOrEmpty(movementsInboxFilter.HaulierReference);
            var isdelegationenabled = (movementsInboxFilter.ObjectDelegationList != 0) ? true : false;
            var isuserenabled = (movementsInboxFilter.UserID != 0) ? true : false;
            var isgrossweightenabled = (movementsInboxFilter.GrossWeight != null) ? true : false;
            
        <table class="GridTable tblheaderfix esdal-table movements" style="margin-left:0%;" id="td_Inbox">
                @{
                    if (ViewBag.structureID == 0)
                    {
                        var sortOrder = ViewBag.SortOrder != null ? (int)ViewBag.SortOrder : 6;
                        var sortType = ViewBag.SortType != null ? (int)ViewBag.SortType : 1;

                        <thead>
                            <tr>
                                @if (Model.Count > 0)
                                {
                                    <th style="text-align: center;" class="folder-drag-elem-select-all-container"><input type="checkbox" class="folder-drag-elem-select-all" /></th>
                                }
                                <th width="5px">
                                    @{ var isStatusFilterEnabled1 = movementsInboxFilter.ImminentMovement; }


                                </th>
                                <th style="width: 5rem; padding-left: 25px">
                                    @Resources.Resource.Status
                                    @{ var isStatusFilterEnabled = movementsInboxFilter.Accepted || movementsInboxFilter.Rejected || movementsInboxFilter.Unopened ||
                                           movementsInboxFilter.Opened || movementsInboxFilter.Withdrawn || movementsInboxFilter.Declined || movementsInboxFilter.ImminentMovement
                                           || movementsInboxFilter.UnderAssessmentbyMe || movementsInboxFilter.UnderAssessment || movementsInboxFilter.UnderAssessmentbyOtherUser; }
                                    <span class="filter-table-icons"><img id="filterimageStatus" style="display:@(isStatusFilterEnabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>
                                </th>
                                <th>
                                    <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 7)" data-action="HaulierSortPolice" data-sortval="7"> ESDAL Reference </span>
                                    
                                    @{ var isEsdalFilterEnabled = !string.IsNullOrEmpty(movementsInboxFilter.ESDALReference); }
                                    <span class="filter-table-icons"><img id="filterimagePoliceERN" style="display:@(isEsdalFilterEnabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>

                                </th>
                                <th class="hauliersortpolice">
                                    <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 4)" data-action="HaulierSortPolice" data-sortval="4"> @Resources.Resource.Type </span>
                                    @{ var isTypeFilterEnabled = movementsInboxFilter.SO || movementsInboxFilter.VSO || movementsInboxFilter.STGO || movementsInboxFilter.CandU ||
                                        movementsInboxFilter.Tracked || movementsInboxFilter.STGOVR1; }
                                    <span class="filter-table-icon"><img id="filterimageType" style="display:@(isTypeFilterEnabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>
                                </th>
                                @if (ObjUserInfo.UserTypeId == 696002)
                                {
                            <th>
                                Vehicle Width
                                <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 8)" data-action="HaulierSortPolice" data-sortval="8"></span>
                            </th>
                                }
                            <th>
                                <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 9)" data-action="HaulierSortPolice" data-sortval="9"> Movement Type </span>
                                
                                <span class="filter-table-icons"><img id="filterimageMsgType" style="display:none" src="~/Content/assets/images/filter-table-icon.svg"></span>
                            </th>
                            <th>
                                <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 5)" data-action="HaulierSortPolice" data-sortval="5"> @Resources.Resource.Movement </span>
                                
                                @{ var isMovementDateFilterEnabled = !string.IsNullOrEmpty(movementsInboxFilter.MovementFromDate) ||
                                        !string.IsNullOrEmpty(movementsInboxFilter.MovementToDate); }
                                <span class="filter-table-icons"><img id="filterimagemovement" style="display:@(isMovementDateFilterEnabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>
                            </th>
                                <th class="hauliersortpolice">

                                    <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 6)" data-action="HaulierSortPolice" data-sortval="6">  @Resources.Resource.Received </span>

                                    @{ var isRecievedDateFilterEnabled = !string.IsNullOrEmpty(movementsInboxFilter.FromReceiptDateOfCommn) ||
                                        !string.IsNullOrEmpty(movementsInboxFilter.ToReceiptDateOfCommn); }
                                    <span class="filter-table-icon"><img id="filterimageRecieved" style="display:@(isRecievedDateFilterEnabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>
                                </th>
                                <th style="width: 2rem; text-align: center;">
                                    <span class="sorting spnSortIconItem @GetSortDefaultClass(sortType, sortOrder, 3)" data-action="HaulierSortPolice" data-sortval="3">  @Resources.Resource.NENOrganisation </span>
                                    
                                    @{ var isOrganisationFilterEnabled = !string.IsNullOrEmpty(movementsInboxFilter.HaulierName); }
                                    <span class="filter-table-icons"><img id="filterimageOrg" style="display:@(isOrganisationFilterEnabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>
                                </th>
                                @if (ObjUserInfo.UserTypeId == 696007)
                                {
                            <th>
                                Suitability 
                                <span class="filter-table-icons"><img id="filterimageOrg" style="display:@( issuitabilityenabled ? "block" : "none")" src="~/Content/assets/images/filter-table-icon.svg"></span>
                            </th>
                                }
                                <th class="table-filter">
                                    <img id="imgopenfilters" src="/Content/assets/images/filter-icon.svg" class="open-filter-icon-common" data-targetContainer=".soa-police-movement-filter" data-width="700" width="38">
                                    <span class="filtered-icon-table ">
                                        <img id="filterimage" style="display:@(isVehicledimension || isTypeFilterEnabled || isStatusFilterEnabled || isEsdalFilterEnabled || isMovementDateFilterEnabled
           || isRecievedDateFilterEnabled || isstartenabled || isendenabled || isstartorendenabled || issuitabilityenabled || isesdalstructurerefenabled || isOrganisationFilterEnabled
           || isshowRecentVersion || isincludehistoricaldata || ishaulierrefenabled || isdelegationenabled||isuserenabled?"block":"none")" src="~/Content/assets/images/filtered-icon.svg" title="Clear filter">
                                    </span>

                                </th>
                            </tr>
                        </thead>
                        if (Model.Count > 0)
                        {
                            foreach (var item in Model)
                            {
                                string movementType = item.MessageType;
                                long MovementRevisionId = item.ApplicationRevisionId;
                                long MovementVersionId = item.VersionId;
                                var requiredClass = "";
                                if (!string.IsNullOrEmpty(movementType))
                                {
                                    movementType = movementType.ToLower();
                                }
                                if (item.IsUnopened == 1)
                                {
                                    requiredClass = "font-weight:bold;";
                                }
                                if (item.UserAssignId == ObjUserInfo.UserId && Convert.ToInt32(item.Status) == 313008)
                                {
                                    requiredClass = "background-color: #F7F0E5; border-bottom-color:#FFF;border-bottom-width:1px;";
                                }
                                <tr draggable="true" class="table_folder_item" style="@requiredClass" data-revisionid="@MovementRevisionId" data-versionid="@MovementVersionId" data-notificationid="@item.NotificationId"
                                    data-movementtype="@movementType" data-projectid="@item.ProjectId">
                                    <td class="folder-drag-elem-container" style="padding-left: 8px !important;"><input type="checkbox" class="folder-drag-elem" /></td>
                                    <td width="5px">
                                        <div class="statusinline">
                                            @if (item.ImminentMovement == 1)
                                            {
                                                <img src="~/Content/assets/images/warning.svg" title="Imminent movement" width="25" class="pl-1">
                                            }
                                        </div>
                                    </td>
                                    <td style="padding-left: 40px !important;">
                                        <div class="statusinline">
                                            @if (item.IsUnopened == 1 && Convert.ToInt32(item.Status) != 313005 &&
                                                Convert.ToInt32(item.Status) != 313006)//313005-accepted,313006-rejected
                                            {
                                                if (item.MessageType.ToLower() == "ne notification" || item.MessageType.ToLower() == "ne renotification")
                                                {
                                                    <a href="@Url.Action("NE_Notification", "NENNotification", new { NEN_ID = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NENId)), Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), inboxItemStat = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemStatus)) })" class="text-decoration-link">
                                                        <img src="~/Content/assets/Icons/unopened.svg" title="Unopened" width="25">
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="@Url.Action("AuthorizeMovementGeneral", "Movements", new { Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)),FromInboxflag = 1, historic = item.IsHistoric })" class="text-decoration-link">
                                                        <img src="~/Content/assets/Icons/unopened.svg" title="Unopened" width="25">
                                                    </a>
                                                }
                                            }
                                            else
                                            {
                                                if (item.IsWithdrawn == 1)
                                                {
                                                    <img src="~/Content/assets/images/withdrawn.svg" title="Withdrawn" width="25" class="pl-1">
                                                }
                                                else if (item.IsDeclined == 1)
                                                {
                                                    <img src="~/Content/assets/Icons/declined.svg" title="Declined" width="25" class="pl-1">
                                                }

                                                else if (Convert.ToInt32(item.Status) == 313001)//delegation failure
                                                {
                                                    <img src="~/Content/assets/images/cancelled.svg" title="Delegation failure" width="25" class="pl-1">
                                                }
                                                else if (Convert.ToInt32(item.Status) == 313004 || Convert.ToInt32(item.Status) == 313008)//313004-undecided,313008-undecided
                                                {
                                                    if (item.UserAssignId == ObjUserInfo.UserId)
                                                    {
                                                        <img src="~/Content/assets/images/under-assement-by-me-01.svg" title="Under assessment by me" width="25" class="pl-1">
                                                    }
                                                    else
                                                    {
                                                        string titletag = !string.IsNullOrWhiteSpace(item.AssignedUserName) ? "Under assessment by " + item.AssignedUserName: "Under assessment";
                                                        <img src="~/Content/assets/images/user-setting.svg" title= "@titletag" width="25" class="pl-1">
                                                    }
                                                }
                                                else if (Convert.ToInt32(item.Status) == 313005)//313005-accepted
                                                {
                                                    <img src="~/Content/assets/images/completed.svg" title="Accepted" width="25" class="pl-1">
                                                }
                                                else if (Convert.ToInt32(item.Status) == 313006)//313006-rejected
                                                {
                                                    <img src="~/Content/assets/images/cancelled.svg" title="Rejected" width="25" class="pl-1">
                                                }
                                                else if (item.UserAssignId == ObjUserInfo.UserId)
                                                {
                                                    <img src="~/Content/assets/images/under-assement-by-me-01.svg" title="Assigned" width="25" class="pl-1">
                                                }
                                                else
                                                {
                                                    <img src="~/Content/assets/Icons/opened.svg" title="Unspecified" width="25">
                                                }
                                            }
                                        </div>
                                    </td>
                                    <td class="text-color1">
                                        @if (item.MessageType.ToLower() == "ne notification" || item.MessageType.ToLower() == "ne renotification")
                                        {
                                            <a href="@Url.Action("NE_Notification", "NENNotification", new { NEN_ID = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NENId)), Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), inboxItemStat = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemStatus)) })" class="text-decoration-link"> @item.ESDALReference</a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("AuthorizeMovementGeneral", "Movements", new { Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), FromInboxflag = 1, historic = item.IsHistoric })" class="text-decoration-link">@item.ESDALReference</a>
                                        }
                                    </td>
                                    <td class="text-color1">
                                        @item.Type
                                    </td>
                                    @if (ObjUserInfo.UserTypeId == 696002)
                                    {
                                        string width = item.VehicleMaxWidth == null ? "" : Convert.ToString(item.VehicleMaxWidth) + " m";
                                        <td class="text-color1">
                                            @width
                                        </td>
                                    }
                                    <td class="text-color2">
                                        @if (item.MessageType.ToLower() == "ne notification" || item.MessageType.ToLower() == "ne renotification")
                                        {
                                            <a href="@Url.Action("NE_Notification", "NENNotification", new { NEN_ID = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NENId)), Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), inboxItemStat = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemStatus)) })" class="text-decoration-link">@item.MessageType</a>
                                        }
                                        else
                                        {
                                            var messageType = "";
                                            if (item.MessageType.ToLower() == "ne agreed notification" || item.MessageType.ToLower() == "ne notification api")  //message type changed for the RM#10753
                                            {
                                                messageType = "NE Notification";
                                            }
                                            else if (item.MessageType.ToLower() == "ne agreed renotification" || item.MessageType.ToLower() == "ne renotification api")
                                            {
                                                messageType = "NE Renotification";
                                            }
                                            else if (item.MessageType.ToLower() == "nolonger affected")
                                            {
                                                messageType = "No longer affected";
                                            }
                                            else
                                            {
                                                messageType = item.MessageType;
                                            }
                                            if (!string.IsNullOrEmpty(messageType) && messageType.Length > 1 && messageType.ToLower() != "ne notification" && messageType.ToLower() != "ne renotification")
                                            {
                                                messageType= string.Join("", messageType.Split('_')
                                                             .Select(w => w.Trim())
                                                             .Where(w => w.Length > 0)
                                                             .Select(w => w.Substring(0, 1).ToUpper() + w.Substring(1).ToLower()));
                                            }
                                            <a href="@Url.Action("AuthorizeMovementGeneral", "Movements", new { Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)),FromInboxflag = 1, historic = item.IsHistoric })" class="text-decoration-link">@messageType</a>
                                        }
                                    </td>
                                    <td class="text-color1">
                                        @{string fro = item.FromDate, to = " " + item.ToDate; }
                                        @fro <span style="text-transform: lowercase">@Resources.Resource.To</span> @to
                                    </td>
                                    <td class="text-color1">
                                        @{string Rece = item.ReceivedDate;}
                                        @Rece
                                    </td>
                                    <td class="text-color1">
                                        @item.StructName
                                    </td>
                                    @if (ObjUserInfo.UserTypeId == 696007)
                                    {
                                        switch (item.ICAStatus)
                                        {
                                            case "277001":
                                                <td  colspan="2"></td>
                                                break;
                                            case "277002":
                                                <td colspan="2"><img src="~/Content/assets/images/yes-icon.svg" width="20" title="Suitable"></td>
                                                break;
                                            case "277003":
                                                <td  colspan="2" class="text-color1" style="font-size: 30px; padding-left: 35px;" title="Marginal structure">?</td>
                                                break;
                                            case "277004":
                                                <td colspan="2"><img src="~/Content/assets/images/no-icon.svg" width="20" title="Unsuitable"></td>
                                                break;
                                            case "277005":
                                                <td colspan="2" class="text-color1" style="font-size: 30px; color: red; padding-left: 35px;" title="Notification unable to be assessed by an enabled ICA">!</td>
                                                break;
                                            default:
                                                <td colspan="2"></td>

                                                break;
                                        }

                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                @if (ObjUserInfo.UserTypeId == 696002 || ObjUserInfo.UserTypeId == 696007)
                                {
                                    colspan = 9;
                                }
                                <td style="text-align: center" colspan="@colspan">
                                    <span style="color: red">No records found</span>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <thead>
                            <tr>
                                <th></th>
                                <th>ESDAL Reference</th>
                                <th>@Resources.Resource.Type</th>
                                <th>@Resources.Resource.MessageType</th>
                                <th>@Resources.Resource.Status</th>
                                <th>Movement date</th>
                                <th>@Resources.Resource.Received</th>
                                <th>Haulier</th>
                                <th class="table-filter">
                                    <img id="imgopenfilters" src="/Content/assets/images/filter-icon.svg" width="38" class="open-filter-icon-common" data-width="680">
                                    <span class="filtered-icon-table ">
                                        <img id="filterimage" class="related-inbox-filter-image" style="display:@(isstartenabled || isendenabled || isstartorendenabled || issuitabilityenabled || isesdalstructurerefenabled
                                        || ishaulierrefenabled || isdelegationenabled || isgrossweightenabled? " block":"none")" src="~/Content/assets/images/filtered-icon.svg" title="Clear filter">
                                    </span>
                                </th>
                            </tr>
                        </thead>
                                                if (Model.Count > 0)
                                                {
                                                    foreach (var item in Model)
                                                    {
                                <tr>
                                    <td class="text-color1">
                                        @if (item.ImminentMovement == 1)
                                        {
                                            <img src="~/Content/assets/images/warning.svg" title="Imminent movement" width="25">
                                        }
                                    </td>
                                    <td class="text-color1">
                                        @if (item.MessageType.ToLower() == "ne notification" || item.MessageType.ToLower() == "ne renotification")
                                        {
                                            <a target="_blank" href="@Url.Action("NE_Notification", "NENNotification", new { NEN_ID = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NENId)), Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), inboxItemStat = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemStatus)) })" class="text-decoration-link">@item.ESDALReference</a>
                                        }
                                        else
                                        {
                                            <a target="_blank" href="@Url.Action("AuthorizeMovementGeneral", "Movements", new { Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), FromInboxflag = 1, historic = item.IsHistoric })" class="text-decoration-link">@item.ESDALReference</a>
                                        }
                                    </td>
                                    <td class="text-color1">
                                        @item.Type
                                    </td>
                                    <td class="text-color2">
                                        @if (item.MessageType.ToLower() == "ne notification" || item.MessageType.ToLower() == "ne renotification")
                                        {
                                            <a target="_blank" href="@Url.Action("NE_Notification", "NENNotification", new { NEN_ID = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NENId)), Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), inboxItemStat = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemStatus)) })" class="text-decoration-link">@item.MessageType</a>
                                        }
                                        else
                                        {
                                            <a target="_blank" href="@Url.Action("AuthorizeMovementGeneral", "Movements", new { Notificationid = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.NotificationId)), esdal_ref = MD5EncryptDecrypt.EncryptDetails(item.ESDALReference), route = MD5EncryptDecrypt.EncryptDetails(item.MessageType), inboxId = MD5EncryptDecrypt.EncryptDetails(Convert.ToString(item.InboxItemId)), FromInboxflag = 1, historic = item.IsHistoric })" class="text-decoration-link">@item.MessageType</a>
                                        }
                                    </td>
                                    <td class="text-color1">
                                        @if (item.IsUnopened == 1)
                                        {
                                            <img src="~/Content/assets/Icons/unopened.svg"  title="Unopened" width="25">
                                        }
                                        else
                                        {
                                            if (item.IsWithdrawn == 1)
                                            {
                                                <img src="~/Content/assets/images/withdrawn.svg"   title="Withdrawn" width="25" class="pl-1">
                                            }
                                            else if (item.IsDeclined == 1)
                                            {
                                                <img src="~/Content/assets/Icons/declined.svg"  title="Declined" width="25" class="pl-1">
                                            }
                                            else if (item.ImminentMovement == 1)
                                            {
                                                <img src="~/Content/assets/images/warning.svg"  title="Imminent movement" width="25" class="pl-1">
                                            }
                                            else if (Convert.ToInt32(item.Status) == 313001)
                                            {
                                                <img src="~/Content/assets/images/cancelled.svg"  title="Delegation failure" width="25" class="pl-1">
                                            }
                                            else if (Convert.ToInt32(item.Status) == 313004 || Convert.ToInt32(item.Status) == 313008)
                                            {
                                                if (item.UserAssignId == ObjUserInfo.UserId)
                                                {
                                                    <img src="~/Content/assets/images/under-assement-by-me-01.svg"   title="Assigned" width="25" class="pl-1">
                                                }
                                                else
                                                {
                                                    <img src="~/Content/assets/images/user-setting.svg"  title="Under assessment" width="25" class="pl-1">
                                                }
                                            }
                                            else if (Convert.ToInt32(item.Status) == 313005)
                                            {
                                                <img src="~/Content/assets/images/completed.svg"  title="Accepted" width="25" class="pl-1">
                                            }
                                            else if (Convert.ToInt32(item.Status) == 313006)
                                            {
                                                <img src="~/Content/assets/images/cancelled.svg"  title="Rejected" width="25" class="pl-1">
                                            }
                                            else
                                            {
                                                <img src="~/Content/assets/Icons/opened.svg"  title="Unspecified" width="25">
                                            }
                                        }
                                    </td>
                                    @{
                                        string fro = Convert.ToDateTime(item.FromDate).ToString("dd/MM/yyyy"), to = Convert.ToDateTime(item.ToDate).ToString("dd/MM/yyyy");
                                    }
                                    <td class="text-color1">
                                        @fro <span style="text-transform: lowercase; margin-right: 3px;">@Resources.Resource.To</span>@to
                                    </td>
                                    <td class="text-color1">
                                        @{
                                            string Rec = Convert.ToDateTime(item.ReceivedDate).ToString("dd/MM/yyyy");}
                                        @Rec
                                    </td>
                                    <td  colspan="2" class="text-color1">
                                        @item.StructName
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td style="text-align: center" colspan="8">
                                    <span style="color: red">No records found</span>
                                </td>
                            </tr>
                        }
                    }
                }
            </table>
        }
        @if (Model.Count > 0)
        {
            <div class="row pagination-container-new MovementInboxList-Pag" style="@(ViewBag.IsRelatedInboxList == 1 ? "flex-wrap: nowrap !important;" : "")">
                <div class="@(ViewBag.structureID == 0?"col-lg-3":"col-lg-5")" style="@(ViewBag.IsRelatedInboxList == 1 ? "width: 30% !important;" : "")">
                        @if (Model.TotalItemCount > 0)
                        {
                            <div class="text-color2 total-records-number">
                                Total number of records : @Model.TotalItemCount
                            </div>
                        }
                    </div>
                    <div class="@(ViewBag.structureID == 0?"col-lg-6":"col-lg-7") text-center" style="@(ViewBag.IsRelatedInboxList == 1 ? "width: 40% !important;" : "")">
                        @if (listCount < Model.TotalItemCount)
                        {
                            <div class="table-pagination soa-pagination">
                                @Html.PagedListPager(Model, page => Url.Action("MovementInboxList",
                                     new { page, sortOrder = ViewBag.SortOrder, sortType = ViewBag.SortType, structureID = @ViewBag.structureID, structureNm = ViewBag.StructureNm, ESRN = ViewBag.ESRN }), new PagedListRenderOptions
                                     {
                                         DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                                         DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                                         LinkToPreviousPageFormat = "<img src='/Content/assets/images/left-chevlon.svg' width='10'>",
                                         LinkToNextPageFormat = "<img src='/Content/assets/images/right-chevlon.svg' width='10'>",
                                         DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                                         DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                                         MaximumPageNumbersToDisplay = 3,
                                         DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                                         EllipsesFormat = "...",
                                         LinkToFirstPageFormat = "<div style='position:absolute;'><img src='/Content/assets/images/left-chevlon.svg' width='10'><img src='/Content/assets/images/left-chevlon.svg' width='10'></div>",
                                         LinkToLastPageFormat = "<div style='position:absolute;'><img src='/Content/assets/images/right-chevlon.svg' width='10'><img src='/Content/assets/images/right-chevlon.svg' width='10'></div>"
                                     })
                            </div>
                        }
                    </div>
                    @if (Model.TotalItemCount > 10)
                    {
                        <div class="@(ViewBag.structureID == 0?"col-lg-3 col-md-3 col-sm-12":"col-lg-12 col-md-12 col-sm-12") text-normal pr-0" style="@(ViewBag.IsRelatedInboxList == 1 ? "width: 30% !important;" : "")">
                            Number of items to display per page
                            <select class="form-select mb-3" style="width:100px;" aria-label=".form-select-lg example" id="pageSizeSelect">
                                <option val="10" @(pageSize == 10 ? "selected" : "")>10</option>
                                <option val="20" @(pageSize == 20 ? "selected" : "")>20</option>
                                <option val="50" @(pageSize == 50 ? "selected" : "")>50</option>
                                <option val="100" @(pageSize == 100 ? "selected" : "")>100</option>
                            </select>
                        </div>
                    }
                </div>
        }
    </div>
    <!-- end of table -->
    @if (ViewBag.structureID != null && ViewBag.structureID != 0)
    {
        <div class="button mr-0 mb-2 mt-4">
            <button id="btnback" class="btn outline-btn-primary btn-normal" role="button" aria-pressed="true"
                    style="width: 12rem !important;" data-structid="@ViewBag.structureID">
                BACK
            </button>
        </div>
    }
</div>
<input type="hidden" value="true" id="hf_SOAPoliceMovement" name="hf_SOAPoliceMovement" />
@{
    string GetSortDefaultClass(int sortType, int sortOrder, int valToCheck)
    {

        var sortClass = ""; //0-asc, 1-desc ,
        if (sortOrder == valToCheck)
        {
            sortClass = sortType == 1 ? "sorting_desc" : "sorting_asc";
        }
        return sortClass;
    }
}