@model STP.Domain.RoadNetwork.Constraint.ConstraintModel

@using System.Web.Optimization
@using STP.Web.Custom.Views
@using STP.Domain.RoadNetwork.Constraint
@using System.Web.Mvc
@using STP.Domain.SecurityAndUsers

@{
    Layout = null;
    int UOM = ViewBag.UOM;

}

@{
    bool isAdmin = false;
    int portalType = 0;
    if (Session["UserInfo"] != null)
    {
        var user = (UserInfo)Session["UserInfo"];
        portalType = user.UserTypeId;
        if (portalType == 696006 || user.IsAdmin == 1)
        {
            isAdmin = true;
        }
    }

    var isPartialView = ViewBag.isPartialView != null ? (bool)ViewBag.isPartialView : false;
}

<div id="soa-structure-detail" class="create-constraint">
    @Html.Hidden("UOM", UOM)
    <style>


        .error {
            color: red;
            display: none;
            font-size: 12px;
            width: max-content;
        }

        .LeftpanelConst {
            height: auto !important;
            min-height: 36rem !important;
            width: 26rem !important;
        }

        #ui-datepicker-div th:nth-child(2) span {
            color: #212529 !important;
        }

        #ui-datepicker-div th:last-child {
            background-color: rgba(39, 87, 149, 1) !important;
        }

        .select-tag:hover + .selected-value {
            display: block !important;
        }

        .selected-value {
            display: none !important;
        }

        .custselected {
            height: auto !important;
            background-color: rgba(165, 165, 165, 0.8);
            border-top: 0px !important;
        }
        #dialogue {
            margin-left: 0px !important;
            margin-top: 132px !important;
        }
    </style>
    <!--main content -->
    <div id="banner" class="map-icons">
        <!-- google-map-setting-start -->
        @*<div id="googleMap" style="height: 590px;" class="google-map"></div>
            <form>
                <input type='hidden' name='lat' id='lat'>
                <input type='hidden' name='lng' id='lng'>
            </form>*@
        <!-- google-map-setting-end -->
        <div id="createConsDiv" class="card LeftpanelConst" style="position: absolute; top:133px;">
            <div class="card-content">
                <div class="title">
                    Create Constraint
                </div>
                <div class="row mt-4 main-entry">

                    <div class="col-lg-12 col-md-12 col-sm-12">
                        @using (Html.BeginForm("SavingConstraint", "Constraint", FormMethod.Post, new { id = "CreateConstraint" }))
                        {
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">@Resources.Resource.Owner</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-7 input-field">
                                    @*<input class="edit-normal" type="text" name="from">*@
                                    <span class="edit-normal">@Model.OrganisationName </span>
                                    @*@Html.LabelFor(model => model.OrganisationName, new { maxlength = 100, @class = "edit-normal", @readonly = true })*@
                                    @Html.HiddenFor(model => model.OrganisationName)
                                    @Html.ValidationSummary(true)

                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">@Resources.Resource.Name *</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-7 input-field">
                                    @*<input class="edit-normal" type="text" name="from">*@
                                    @Html.TextBoxFor(model => model.ConstraintName, new { maxlength = 100, @class = "edit-normal" })
                                    @Html.HiddenFor(model => model.HdnConstraintName)
                                    <span id="spCONSTRAINT_NAME" class="error"></span>
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Type</label>
                                </div>
                                <div class="col-sm-4 col-md-6 col-lg-6 input-field text-normal">
                                    @*<select class="form-select mb-3" aria-label=".form-select-lg example">
                                            <option selected>Generic</option>
                                        </select>*@

                                    @Html.DropDownListFor(model => model.ConstraintTypeId, Model.ConstraintTypeList, new { @class = "form-select mb-3 select-tag" })
                                    @Html.HiddenFor(model => model.HdnConstraintTypeId)
                                    @Html.HiddenFor(model => model.ConstraintTypeName)
                                    @Html.HiddenFor(model => model.ConstraintType)
                                    <div class="card selected-value custselected">
                                        <div class="edit-normal">
                                            <label id="lblSelectedVal"></label>

                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-2" style="display:none">
                                @Html.HiddenFor(model => model.DirectionName)
                                @Html.DropDownListFor(model => model.DirectionId, Model.Direction)
                                @Html.HiddenFor(model => model.HdnDirectionId)
                                @Html.HiddenFor(model => model.DirectionName)
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Start date</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field">
                                    @*<input class="edit-normal" type="text" name="from">*@

                                    @if (Model.StartDateString == null)
                                    {
                                        @Html.DatePicker("StartDateString", new { @class = "spanvalue edit-normal" })
                                    }
                                    else
                                    {
                                        @Html.DatePicker("StartDateString", Model.StartDateString, new { @class = "spanvalue edit-normal" })
                                    }
                                    @Html.HiddenFor(model => model.HdnStartDateString)

                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">End date</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @*<input class="edit-normal" type="text" name="from">*@
                                    @if (Model.EndDateString == null)
                                    {
                                        @Html.DatePicker("EndDateString", new { @class = "spanvalue edit-normal" })
                                    }
                                    else
                                    {
                                        @Html.DatePicker("EndDateString", Model.EndDateString, new { @class = "spanvalue edit-normal" })
                                    }

                                    @Html.HiddenFor(model => model.HdnEndDateString)
                                    <span id="spEndDate" style="width: auto;" class="error"></span>
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Height</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @*<input class="edit-normal" type="text" name="from">*@
                                    @if (ViewBag.UOM == 692001)
                                    {
                                        @Html.TextBoxFor(model => model.Height, new { @class = "numberwidth edit-normal", @Value = "" }) <span>m</span>

                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.Height, new { @class = "numberwidth edit-normal", @Value = "" }) <span>ft/in</span>

                                    }

                                    <span id="spMaxHeight" class="error"></span>
                                    @Html.HiddenFor(model => model.HdnMaxHeightMtrs)
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Width</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @*<input class="edit-normal" type="text" name="from">*@
                                    @if (ViewBag.UOM == 692001)
                                    {
                                        @Html.TextBoxFor(model => model.Width, new { @class = "numberwidth edit-normal", @Value = "" })<span>m</span>

                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.Width, new { @class = "numberwidth edit-normal", @Value = "" })<span>ft/in</span>

                                    }
                                    <span id="spMaxWidth" class="error"></span>
                                    @Html.HiddenFor(model => model.HdnMaxWidthMeters)
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Length</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @*<input class="edit-normal" type="text" name="from">*@
                                    @if (ViewBag.UOM == 692001)
                                    {
                                        @Html.TextBoxFor(model => model.Length, new { @class = "numberwidth edit-normal", @Value = "" })<span>m</span>
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.Length, new { @class = "numberwidth edit-normal", @Value = "" })<span>ft/in</span>
                                    }
                                    <span id="spMaxLength" class="error"></span>
                                    @Html.HiddenFor(model => model.HdnMaxLenMeters)
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Gross weight</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @if (Model.GrossWeight > 0)
                                    {
                                        @Html.TextBoxFor(model => model.GrossWeight, new { @class = "numberwidth edit-normal" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.GrossWeight, new { @Value = "", @class = "numberwidth edit-normal" })
                                    }
                                    <span class="text-color1 ml-2">t</span>
                                    <span id="spGrossWeight" class="error"></span>
                                    @Html.HiddenFor(model => model.HdnMaxGrossWeightKgs)
                                    @Html.HiddenFor(model => model.HdnGrossWeightKgs)
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Axle weight</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @if (Model.AxleWeight > 0)
                                    {
                                        @Html.TextBoxFor(model => model.AxleWeight, new { @class = "numberwidth edit-normal" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.AxleWeight, new { @Value = "", @class = "numberwidth edit-normal" })
                                    }
                                    <span class="text-color1 ml-2">t</span>
                                    <span id="spAxleWeight" class="error"></span>
                                    @Html.HiddenFor(model => model.HdnMaxAxleWeightKgs)
                                    @Html.HiddenFor(model => model.HdnAxleWeightKgs)

                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Owner is contact</label>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                    @*<input type="checkbox" id="bulldozer" class="checkbox" name="bulldozer"
                                        value="bulldozer" width="28">*@
                                    @Html.CheckBoxFor(model => model.OwnerIsContactFlag)
                                    @Html.HiddenFor(model => model.HdnOwnerIsContactFlag)
                                </div>
                            </div>

                            if (Model.TopologyType == 248002)
                            {
                                <div class="row mb-4">
                                    <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                        <label class="text-normal">@Resources.Resource.IsNodeConstraint</label>
                                    </div>
                                    <div class="col-sm-4 col-md-5 col-lg-5 input-field text-normal">
                                        @Html.CheckBoxFor(model => model.IsNodeConstraintFlag)
                                        @Html.HiddenFor(model => model.HdnIsNodeConstraintFlag)
                                    </div>
                                </div>
                            }
                            <div>@Html.HiddenFor(model => model.TopologyType)</div>
                            <div id="hidden_values"></div>

                            <div class="row pt-4">
                                <div class="col-sm-4 col-md-6 col-lg-5 pr-0">
                                    <div class="button mr-2 modal-footer">
                                        <button type="button" class="btn btn-outline-primary btn-normal btn-save-constraint" data-dismiss="modal">
                                            SAVE
                                        </button>
                                    </div>
                                </div>
                                <div class="col-sm-4 col-md-5 col-lg-3 input-field text-normal">
                                    <div class="button mr-0 modal-footer">
                                        <button type="button" class="btn btn-outline-primary btn-normal btn-cancel-constraint"
                                                aria-pressed="true">
                                            CANCEL
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>


                </div>
            </div>

        </div>
        <img id="card-swipecon1" src="/Content/assets/images/card-swipe-on.svg" width="30" class="btn-open-constraint-nav" style="cursor:pointer;margin-left: 0px; margin-top: 210px;">
        <img id="card-swipecon2" src="/Content/assets/images/card-swipe-off.svg" width="30" class="btn-close-constraint-nav" style="cursor: pointer;margin-left: 381px; margin-top: 210px; ">


        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
             aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header pt-0">
                    </div>
                    <div class="modal-body pt-0">
                        @*<img src="assets/images/warning-icon2.svg" width="30">*@
                        <img src="~/Content/assets/images/warning-icon2.svg" width="30" />
                        <div class="edit-normal">
                            Adding a caution is mandatory to create a constraint.
                            Do you want to proceed?
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-cancel-show-warining" data-dismiss="modal">NO</button>
                        <button type="button" class="btn btn-secondary btn-save-constraint" data-dismiss="modal">YES</button>
                    </div>
                </div>
            </div>
        </div>


        <div class="modal fade" id="exampleModalCenter5" tabindex="-1" role="dialog"
             aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header pt-2">
                    </div>
                    <div class="modal-body">
                        <img src="~/Content/assets/images/warning-icon2.svg" width="30">
                        <div class="edit-normal">Constraint creation failed</div>
                    </div>
                    <div class="modal-footer pt-4">
                        <button type="button" class="btn btn-secondary btn-reload-popup" data-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>

        @*</div>*@

    </div>
    <!--end of main content -->
</div>

@if (!isPartialView)
{
    <script src="~/Scripts/Constraint/CreateConstraint.js?V@(Session["ProjectVersion"])"></script>
    @Html.Hidden("hf_isPartialView", isPartialView)
}
