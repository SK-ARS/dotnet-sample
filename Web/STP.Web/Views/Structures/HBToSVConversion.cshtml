@using STP.Domain
@using STP.Domain.Structures
@model STP.Domain.Structures.SVDataWithLoadModel


@{
    List<double?> lstHBRating = ViewBag.LstHBRating;

    string HBWithLoad = "", HBWithoutLoad = "";

    int lstCalFactorExists = 0;
    bool performBtnFlag = ViewBag.performBtnFlag;
    if (lstHBRating != null && lstHBRating.Count > 0)
    {
        HBWithLoad = Convert.ToString(lstHBRating[0]) == "0" ? null : Convert.ToString(lstHBRating[0]);
        HBWithoutLoad = Convert.ToString(lstHBRating[1]) == "0" ? null : Convert.ToString(lstHBRating[1]); ;
    }

    string spnCalSV80 = null, spnCalSV100 = null, spnCalSV150 = null, spnCalSVTrain = null, spnCalSVTT = null;
    string txtManSV80 = null, txtManSV100 = null, txtManSV150 = null, txtManSVTrain = null, txtManSVTT = null;


    int lstCalSVDataListObjCnt = 0, lstCalFactorObjCnt = 0;
    List<SvReserveFactors> lstCalSVDataListObj = ViewBag.LstCalSvReserveFactors;

    if (lstCalSVDataListObj != null)
    {
        if (lstCalSVDataListObj.Count > 0)
        {
            lstCalSVDataListObjCnt = 1;
            foreach (var items in lstCalSVDataListObj)
            {
                if (items.CalculatedFactor != null)
                {
                    lstCalFactorObjCnt = 1;
                    lstCalFactorExists = 1;
                }

                if (items.SVDerivation == 275003)
                {
                    if (items.VehicleType == 340002)
                    {
                        spnCalSV80 = Convert.ToString(items.CalculatedFactor);
                        spnCalSV80 = string.IsNullOrEmpty(spnCalSV80) ? spnCalSV80 : Convert.ToDouble(spnCalSV80).ToString("#.###");
                    }
                    if (items.VehicleType == 340003)
                    {
                        spnCalSV100 = Convert.ToString(items.CalculatedFactor);
                        spnCalSV100 = string.IsNullOrEmpty(spnCalSV100) ? spnCalSV100 : Convert.ToDouble(spnCalSV100).ToString("#.###");
                    }
                    if (items.VehicleType == 340004)
                    {
                        spnCalSV150 = Convert.ToString(items.CalculatedFactor);
                        spnCalSV150 = string.IsNullOrEmpty(spnCalSV150) ? spnCalSV150 : Convert.ToDouble(spnCalSV150).ToString("#.###");
                    }
                    if (items.VehicleType == 340005)
                    {
                        spnCalSVTrain = Convert.ToString(items.CalculatedFactor);
                        spnCalSVTrain = string.IsNullOrEmpty(spnCalSVTrain) ? spnCalSVTrain : Convert.ToDouble(spnCalSVTrain).ToString("#.###");
                    }
                    if (items.VehicleType == 340006)
                    {
                        spnCalSVTT = Convert.ToString(items.CalculatedFactor);
                        spnCalSVTT = string.IsNullOrEmpty(spnCalSVTT) ? spnCalSVTT : Convert.ToDouble(spnCalSVTT).ToString("#.###");
                    }

                }
            }
        }
        @Html.Hidden("CalculatedExists", lstCalFactorExists);
    }



    List<SVDataList> lstManSVDataListObj = ViewBag.LstManSVDataListObj;


    string V_SVDerivation = "";
    if (lstManSVDataListObj != null && lstManSVDataListObj.Count > 0)
    {
        V_SVDerivation = Convert.ToString(lstManSVDataListObj[0].SVDerivation);
    }
    //if (lstManSVDataListObj != null && lstManSVDataListObj.Count > 0)
    //{
    //    V_SVDerivation = Convert.ToString(lstManSVDataListObj[0].SVDerivation);
    //    foreach (var items in lstManSVDataListObj)
    //    {
    //        if (items.SVDerivation == 275002)
    //        {
    //            if (items.VehicleType == 340002)
    //            {
    //                txtManSV80 = Convert.ToString(items.ManualInputFactor);
    //                txtManSV80 = string.IsNullOrEmpty(txtManSV80) ? txtManSV80 : Convert.ToDouble(txtManSV80).ToString("#.###");
    //                if (!String.IsNullOrEmpty(txtManSV80))
    //                {
    //                    if (Convert.ToDouble(txtManSV80) < 1 && Convert.ToDouble(txtManSV80) > 0)
    //                    {
    //                        txtManSV80 = "0" + txtManSV80;
    //                    }
    //                }


    //            }
    //            if (items.VehicleType == 340003)
    //            {
    //                txtManSV100 = Convert.ToString(items.ManualInputFactor);
    //                txtManSV100 = string.IsNullOrEmpty(txtManSV100) ? txtManSV100 : Convert.ToDouble(txtManSV100).ToString("#.###");
    //                if (!String.IsNullOrEmpty(txtManSV100))
    //                {
    //                    if (Convert.ToDouble(txtManSV100) < 1 && Convert.ToDouble(txtManSV100) > 0)
    //                    {
    //                        txtManSV100 = "0" + txtManSV100;
    //                    }
    //                }
    //            }
    //            if (items.VehicleType == 340004)
    //            {
    //                txtManSV150 = Convert.ToString(items.ManualInputFactor);
    //                txtManSV150 = string.IsNullOrEmpty(txtManSV150) ? txtManSV150 : Convert.ToDouble(txtManSV150).ToString("#.###");
    //                if (!String.IsNullOrEmpty(txtManSV150))
    //                {
    //                    if (Convert.ToDouble(txtManSV150) < 1 && Convert.ToDouble(txtManSV150) > 0)
    //                    {
    //                        txtManSV150 = "0" + txtManSV150;
    //                    }
    //                }
    //            }
    //            if (items.VehicleType == 340005)
    //            {
    //                txtManSVTrain = Convert.ToString(items.ManualInputFactor);
    //                txtManSVTrain = string.IsNullOrEmpty(txtManSVTrain) ? txtManSVTrain : Convert.ToDouble(txtManSVTrain).ToString("#.###");
    //                if (!String.IsNullOrEmpty(txtManSVTrain))
    //                {
    //                    if (Convert.ToDouble(txtManSVTrain) < 1 && Convert.ToDouble(txtManSVTrain) > 0)
    //                    {
    //                        txtManSVTrain = "0" + txtManSVTrain;
    //                    }
    //                }
    //            }
    //            if (items.VehicleType == 340006)
    //            {
    //                txtManSVTT = Convert.ToString(items.ManualInputFactor);
    //                txtManSVTT = string.IsNullOrEmpty(txtManSVTT) ? txtManSVTT : Convert.ToDouble(txtManSVTT).ToString("#.###");
    //                if (!String.IsNullOrEmpty(txtManSVTT))
    //                {
    //                    if (Convert.ToDouble(txtManSVTT) < 1 && Convert.ToDouble(txtManSVTT) > 0)
    //                    {
    //                        txtManSVTT = "0" + txtManSVTT;
    //                    }
    //                }
    //            }

    //        }
    //    }
    //}
    }


<div class="form" style="padding-left: 5.5rem !important;">
    <div class="text-regular pl-2 pt-5 pb-3">
        HB rating
    </div>
    <div class="row pb-3">
        <div class="col-lg-4 col-md-4 col-sm-12" style="text-align: initial;">
            <label for="maSpacingId" class="text-normal">With live load</label>
        </div>
        <div class="col-lg-5 col-md-5 col-sm-12" style="text-align: initial;">
            @Html.TextBox("HBWithLoad", HBWithLoad, new { @id = "HBWithLoad", @class = "edit-normal" })
            <span id="spnErrHBWithLoad" class="error"></span>
        </div>
    </div>
    <div class="row pb-3">
        <div class="col-lg-4 col-md-4 col-sm-12" style="text-align: initial;">
            <label for="maSpacingId" class="text-normal">
                Without live
                load
            </label>
        </div>
        <div class="col-lg-5 col-md-5 col-sm-12" style="text-align: initial;">
            @Html.TextBox("HBWithoutLoad", HBWithoutLoad, new { @id = "HBWithoutLoad", @class = "edit-normal" })
        </div>
    </div>
    <div class="text-regular pl-2 pt-5 pb-3">
        HB to SV conversion factor
    </div>
    <div class="pb-3">
        <div class="main-table">
            <table>
                <thead>
                    <tr>
                        <th class="text-regular-para"></th>
                        <th class="text-regular-para" style="font-size:14px;">SV-80</th>
                        <th class="text-regular-para" style="font-size: 14px; ">SV-100</th>
                        <th class="text-regular-para" style="font-size: 14px; ">SV-150</th>
                        <th class="text-regular-para" style="font-size: 14px; ">SV-Train</th>
                        <th class="text-regular-para" style="font-size: 14px; ">SV-TT</th>
                    </tr>
                </thead>
                <tbody>
                    @{

                        if (lstCalSVDataListObjCnt == 1 && lstCalFactorObjCnt == 1)
                        {
                            <tr>
                                <th class="text-regular-para" style="font-size:14px;">Calculated</th>
                                <td>
                                    <span id="spnCalSV80" style="color: black; font-size: 14px;">@spnCalSV80</span>
                                </td>
                                <td>
                                    <span id="spnCalSV100" style="color: black; font-size: 14px;">@spnCalSV100</span>
                                </td>
                                <td>
                                    <span id="spnCalSV150" style="color: black; font-size: 14px;">@spnCalSV150</span>
                                </td>
                                <td>
                                    <span id="spnCalSVTrain" style="color: black; font-size: 14px;">@spnCalSVTrain</span>
                                </td>
                                <td>
                                    <span id="spnCalSVTT" style="color: black; font-size: 14px;">@spnCalSVTT</span>
                                </td>
                            </tr>
                        }
                    }
                    <tr>
                        <th class="text-regular-para" style="font-size:14px;">Manual</th>
                        <td>
                            <div class="input-field">
                                @Html.TextBox("ManualSV80", String.Format("{0:0.0}", txtManSV80), new { @id = "ManualSV80", @name = "ManualSV", @class = "edit-normal" , @style = "font-size: 14px; " })
                            </div>
                        </td>
                        <td>
                            <div class="input-field">
                                @Html.TextBox("ManualSV100", txtManSV100, new { @id = "ManualSV100", @name = "ManualSV", @class = "edit-normal", @style = "font-size: 14px; " })
                        </td>
                        <td>
                            <div class="input-field">
                                @Html.TextBox("ManualSV150", txtManSV150, new { @id = "ManualSV150", @name = "ManualSV", @class = "edit-normal", @style = "font-size: 14px; " })
                        </td>
                        <td>
                            <div class="input-field">
                                @Html.TextBox("ManualSVTrain", txtManSVTrain, new { @id = "ManualSVTrain", @name = "ManualSV", @class = "edit-normal", @style = "font-size: 14px; " })
                        </td>
                        <td>
                            <div class="input-field">
                                @Html.TextBox("ManualSVTT", txtManSVTT, new { @id = "ManualSVTT", @name = "ManualSV", @class = "edit-normal", @style = "font-size: 14px; " })
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-7 col-md-7 col-sm-12 pl-0">
            @{

                if (lstCalSVDataListObjCnt == 1 && lstCalFactorObjCnt == 1)
                {
                    <div class="form-check ml-2 mb-2 text-left">
                        <input type="radio" id="optCalculateHBToSV" class="form-check-input" name="optSectionDetails" />

                        <label class="form-check-label text-normal text-color3"
                               for="flexRadioDefault2">
                            Calculated HB to SV conversion
                        </label>
                    </div>
                }
            }
            <div class="form-check ml-2 mb-2 text-left">
                <input type="radio" id="optManualHBToSV" class="form-check-input" name="optSectionDetails" checked />

                <label class="form-check-label text-normal text-color3"
                       for="flexRadioDefault1">
                    Manual HB to SV conversion
                </label>
            </div>
        </div>
    </div>
</div>
 
@{
    <input type="hidden" value="@ViewBag.sectionType" id="hf_sectionType" name="hf_sectionType" />
    @Html.Hidden("hf_V_SVDerivation", V_SVDerivation)
    @Html.Hidden("hf_performBtnFlag", performBtnFlag)
    <input type="hidden" value="@ViewBag.StructureId" id="hf_StructureId" name="hf_StructureId" />
    <input type="hidden" value="@ViewBag.SectionId" id="hf_SectionId" name="hf_SectionId" />
    <input type="hidden" value="@ViewBag.ESRN" id="hf_ESRN" name="hf_ESRN" />
    //<input type="hidden" value="@ViewBag.performBtnFlag" id="hf_performBtnFlag" name="hf_performBtnFlag" />
}
@*<script src="~/Scripts/Structures/HBToSVConversion.js?V@(Session["ProjectVersion"])"></script>*@
