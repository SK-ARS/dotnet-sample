@{
    Layout = null;
}
@model STP.Domain.Structures.StructureModel

@{
    int UOM = ViewBag.UOM;

}
<div id="CreateCautionContainer">
    <style>

        .selectColor {
            background-color: #f2f2f2;
        }

        .ah1 {
            justify-content: center !important;
        }

        .btn-layout1 {
            width: 14rem !important;
            padding: 0.675rem 0.75rem !important;
        }

        .outline-btn-primary:hover, .btn-outline-primary:hover {
            background-color: #275795 !important;
            color: white !important;
        }

        .outline-btn-primary:hover {
            color: rgba(39, 87, 149, 1);
        }

        .mr-r1 {
            margin-right: 1rem;
        }
        button.fontStyle.active {
            background: linear-gradient(0deg, #3581e1, #ffffff) !important;
        }
    </style>
    <div class="flexer justify-content-start mt-5 widthP40">
        <button class="btn outline-btn-primary btn-layout1 SOAButtonHelper fAdd addedcausion" arg1="newCaution">
            NEW CAUTION
        </button>
        <button class="btn outline-btn-primary btn-layout1 SOAButtonHelper fAdd ml2 opnhstory" arg1="history-soa">HISTORY</button>
    </div>
    @Html.Hidden("UOM", UOM)
    @using (Html.BeginForm("CautionAddReport", "Structures", FormMethod.Post, new { Id = "CautionInfo" }))
    {
        <div class="row" id="newCaution" style="display: none;">
            @Html.HiddenFor(model => model.SelectedTypeName, new { Id = "SelectedTypeName" })
            @Html.HiddenFor(model => model.StructureId, new { Id = "STRUCTURE_ID" })
            @Html.HiddenFor(model => model.StructureCode, new { Id = "STRUCTURE_CODE" })
            @Html.HiddenFor(model => model.StructureName, new { Id = "STRUCTURE_NAME" })
            @Html.HiddenFor(model => model.CautionId, new { Id = "CAUTION_ID" })
            <div class="col-6 colSOA1 pl-0">
                <div class="row mt-5">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="ownerId" class="label2">@Resources.Resource.Owner</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0">
                        <span id='ownerId' class="text1 ml-2">
                            @Html.HiddenFor(model => model.OrganisationId)
                            @Html.HiddenFor(model => model.OrganizationName)
                            @Html.DisplayFor(model => model.OrganizationName)


                            @if (ViewBag.UOM == 692001)
                            {
                                @Html.HiddenFor(model => model.MaxHeight)
                                @Html.HiddenFor(model => model.MaxWidth)
                                @Html.HiddenFor(model => model.MaxLength)
                                @Html.HiddenFor(model => model.MinSpeed)
                                @Html.HiddenFor(model => model.MaxGrossWeight)
                                @Html.HiddenFor(model => model.MaxAxleWeight)
                            }
                        </span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="nameId" class="label2">@Resources.Resource.Name *</label>
                    </div>
                    <div class="col-7 c9p40Helper pl-0" id="validname">
                        @Html.TextBoxFor(model => model.CautionName, null, new { @class = "txtclass" })
                        <span id="nameReqValidate" class="error invalid-feedback" style="display:none">The name is required</span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="heightId" class="label2">@Resources.Resource.Height</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0" id="div-validheight">
                        @if (Convert.ToString(Model.Height == null ? string.Empty : Model.Height).Trim().Length > 0)
                        {
                            @Html.TextBoxFor(model => model.Height, new { @class = "wP401" })

                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.Height, new { @Value = "", @class = "wP401" })

                        }
                        @if (ViewBag.UOM == 692001)
                        {
                            <span class="text-color1 ml-2">m</span>
                        }
                        else
                        {
                            <span class="text-color1 ml-2">ft/in</span>
                        }
                        <span id="heightValidate" class="error invalid-feedback" style="display:none"><br>Please enter valid height</span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="widthId1" class="label2">@Resources.Resource.Width</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0" id="div-validwidth">
                        @if (Convert.ToString(Model.Width == null ? string.Empty : Model.Width).Trim().Length > 0)
                        {
                            @Html.TextBoxFor(model => model.Width, new { @class = "wP401" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.Width, new { @Value = "", @class = "wP401" })
                        }
                        @if (ViewBag.UOM == 692001)
                        {
                            <span class="text-color1 ml-2">m</span>
                        }
                        else
                        {
                            <span class="text-color1 ml-2">ft/in</span>
                        }
                        <span id="widthValidate" class="error invalid-feedback" style="display:none"><br>Please enter valid width</span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="lengthId1" class="label2">@Resources.Resource.Length</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0"  id="div-validlength">
                        @if (Convert.ToString(Model.Length == null ? string.Empty : Model.Length).Trim().Length > 0)
                        {
                            @Html.TextBoxFor(model => model.Length, new { @class = "wP401" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.Length, new { @Value = "", @class = "wP401" })
                        }
                        @if (ViewBag.UOM == 692001)
                        {
                            <span class="text-color1 ml-2">m</span>
                        }
                        else
                        {
                            <span class="text-color1 ml-2">ft/in</span>
                        }
                        <span id="lengthValidate" class="error invalid-feedback" style="display:none"><br>Please enter valid length</span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="grossWeightId" class="label2">@Resources.Resource.GrossWeight</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0" id="div-validgrossweight">
                        @if (Model.GrossWeight > 0)
                        {
                            @Html.TextBoxFor(model => model.GrossWeight, new { @class = "wP401" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.GrossWeight, new { @Value = "", @class = "wP401" })
                        }
                        <span class="text-color1 ml-2">t</span>
                        <span id="grossWeightValidate" class="error invalid-feedback" style="display:none"><br>Please enter valid gross weight</span>
                        @*<span id="grossWeightReqValidate" class="error invalid-feedback" style="display:none"><br>The gross weight is required</span>*@
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="aWeightId" class="label2">@Resources.Resource.AxleWeight</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0" id="div-validaxlecaution">
                        @if (Model.AxleWeight > 0)
                        {
                            @Html.TextBoxFor(model => model.AxleWeight, new { @class = "wP401" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.AxleWeight, new { @Value = "", @class = "wP401" })
                        }
                        <span class="text-color1 ml-2">t</span>
                        <span id="axleWeightValidate" class="error invalid-feedback" style="display:none"><br>Please enter valid axle weight</span>
                        @*<span id="axleWeightReqValidate" class="error invalid-feedback" style="display:none"><br>The axle weight is required</span>*@
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 c3p40Helper pl-0">
                        <label for="speedId" class="label2">@Resources.Resource.Speed</label>
                    </div>
                    <div class="col-8 c9p40Helper pl-0" id="div-validspeedcaution">
                        @if (Convert.ToString(Model.Speed == null ? string.Empty : Model.Speed).Trim().Length > 0)
                        {
                            @Html.TextBoxFor(model => model.Speed, new { @class = "wP401" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.Speed, new { @Value = "", @class = "wP401" })
                        }
                        <span class="text-color1 ml-2">
                            @if (ViewBag.UOM == 692001)
                            {@Resources.Resource.Kph}
                        else
                        {@Resources.Resource.Mph}
                        </span>
                        <span id="speedValidate" class="error invalid-feedback" style="display:none"><br>Please enter valid speed</span>
                        @*<span id="speedReqValidate" class="error invalid-feedback" style="display:none"><br>The speed is required</span>*@
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-4 pl-0">
                        <label for="cicId" class="label2" style="vertical-align: sub;">
                            @Resources.Resource.CreatorIdsContact
                        </label>
                    </div>
                    <div class="col-8 pl-0">
                        @Html.CheckBoxFor(model => model.CreatorIsContact, new { @width = "28" })
                    </div>
                </div>
            </div>
            <div class="col-6 colSOA1">
                <div class="flexer mt-5 align-items-start">
                    <label for="actionId" class="label2">@Resources.Resource.Action</label>
                    <div id="actionId" class="flexer radioSOA">
                        <div class="form-check">
                            @Html.HiddenFor(model => model.SelectedType, new { id = "hdnStandardCaution" })
                            @Html.RadioButtonFor(model => model.SelectedType, ActionType.StandardCaution, new { @class = "form-check-input", @name = "flexRadioDefault" })
                            <label class="form-check-label label2" for="flexRadioDefault1">
                                @Resources.Resource.StandardCaution
                            </label>
                        </div>
                        <div class="form-check">
                            @Html.RadioButtonFor(model => model.SelectedType, ActionType.SpecificAction, new { @class = "form-check-input", @name = "flexRadioDefault" })
                            <label class="form-check-label label2" for="flexRadioDefault2">
                                @Resources.Resource.SpecificAction
                            </label>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-12 col-lg-12">
                    <div class="cardHelperSOA mt-0 pr-3" id="textNote">
                        <fieldset>
                            <div class="btn-group" id="divcopy" role="group" aria-label="...">
                                <button id="linkBold" type="button" class="fontStyle bold" data-font="bold" data-flag="false"  data-status="null" 
                                        title="Bold Highlighted Text">
                                    <b>B</b>
                                    @Html.CheckBoxFor(model => model.Bold, new { type = "hidden", Id = "chkBold" })
                                </button>
                                <div class="vl"></div>
                                <button id="linkUnderline" type="button" class="fontStyle underline" data-font="underline" data-flag="false"  data-status="null"
                                         title="Underline Highlighted Text">
                                    <u class="underline1">U</u>
                                    @Html.CheckBoxFor(model => model.Underline, new { type = "hidden", Id = "chkUnderline" })
                                </button>
                                <div class="vl"></div>
                                <button id="linkItalic" type="button" class="fontStyle italic" data-font="italic" data-flag="false"  data-status="null"
                                        title="Italicize Highlighted Text">
                                    <i>I</i>
                                    @Html.CheckBoxFor(model => model.Italic, new { type = "hidden", Id = "chkItalic" })
                                </button>
                                <div class="vl"></div>
                            </div>
                        </fieldset>
                        @Html.TextAreaFor(model => model.DirectionName, new { @hidden = "true", @id = "Description", @cols = "30", @rows = "10", @class = "w-100", @onkeypress = "return isNonAlphaNum(event)" })

                        <div id="editor1" contenteditable="true" style="color:black; height:270px;">
                        </div>
                        <span id="descValidate" class="error invalid-feedback" style="display:none">Special characters & < and > are not allowed.</span>
                    </div>
                </div>
            </div>

            <div class="row ah1 mt8">
                <button class="btn outline-btn-primary btn-normal btn-layout1 mb-2 mr-r1" type="button" id="SaveCaution">SAVE</button>

                <button class="btn outline-btn-primary btn-normal btn-layout1 mr-r1 mb-2 ml2" id="btn_back" type="button">

                    CANCEL
                </button>
            </div>
        </div>
    }
    @{
        <input type="hidden" value="@ViewBag.StructureId" id="hf_StructureId" name="hf_StructureId" />
        <input type="hidden" value="@ViewBag.SectionId" id="hf_SectionId" name="hf_SectionId" />
        <input type="hidden" value="@ViewBag.mode" id="hf_mode" name="hf_mode" />
    }
</div>
    @*<script src="~/Scripts/Structures/CreateCaution.js?V@(Session["ProjectVersion"])"></script>*@
