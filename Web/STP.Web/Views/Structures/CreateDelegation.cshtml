@using PagedList.Mvc
@model  PagedList.IPagedList<STP.Domain.Structures.DelegationStructuresList>


@{
    //Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    long arrId = Convert.ToInt64(ViewBag.arrangId);
    int pageNum = 10;
    TempData["DelegationContact"] = Model[0].CreateDelegationList;
    if (Model[0].StructurePerPageCount != null)
    {
        pageNum = Model[0].StructurePerPageCount;
    }

    int count = Model.Count();
    if (ViewBag.pageSize != null)
    {
        pageNum = ViewBag.pageSize;
    }
    int listCount = 0;
    listCount = (int)Session["PageSize"];
    int orgId = 0;
    int EditOrgId = 0;
    int orgToId = 0;
    if (ViewBag.orgId != null)
    {
        TempData["orgID"] = orgId = Convert.ToInt32(ViewBag.orgId);
    }
    else if (TempData["orgID"] != null)
    {
        ViewBag.orgId = orgId = Convert.ToInt32(TempData["orgID"]);
    }
    if (ViewBag.OrganisationId != null)
    {
        orgToId = Convert.ToInt32(ViewBag.OrganisationId);
    }

    if (orgId == 0)
    {
        orgId = orgToId;
    }

    EditOrgId = Convert.ToInt32(TempData["EditOrganisationId"]);

    var StructurePagingList = (PagedList.StaticPagedList<STP.Domain.Structures.StructureInDelegationList>)Model[0].StructuresStaticPageList;





}






<body style="overflow-y: auto;" id="soa-structure-delgation">
    @using (Html.BeginForm())//("SaveDelegation", "Structures", new { orgId = ViewBag.orgId }))
    {
        bool subel = false;
        @Html.Hidden("pageSizeVal", pageNum)
        @Html.Hidden("arrangId", arrId)
        @Html.Hidden("OrgFromId", orgId)

        @Html.Hidden("ArrangementId", arrId)
        @Html.Hidden("arrangID", arrId)
        @Html.Hidden("orgID", orgId)
        @Html.Hidden("arrangname")
        @Html.Hidden("orgname")
        @Html.Hidden("contactname")
        @Html.Hidden("subdeleg")
        @Html.Hidden("retainnotif")
        @Html.Hidden("acceptfailure")
        @Html.Hidden("delegateAll")
        @Html.Hidden("EditOrganisationId", EditOrgId)
        @Html.Hidden("OrgToId", orgToId)

        @Html.HiddenFor(model => model[0].CreateDelegationList.SelectedTypeName, new { Id = "SelectedTypeName" })
        // this filed use for OrganisationList and ContactList page.// Set value for last open page. OrganisationList = organisation , ContactList = contact
        @Html.Hidden("LastOpenPage");

        <style>
            .header .title {
                font-size: 30px;
                font-style: normal;
                list-style: none;
                font-family: lato_bold, Arial;
                color: rgba(39, 87, 149, 1) !important;
                text-align: center;
            }
            .btn-layout1 {
                width: 14rem !important;
                padding: 0.675rem 0.75rem !important;
            }
            .btn-layout2 {
                width: 16rem !important;
                padding: 0.675rem 0.75rem !important;
            }
            .outline-btn-primary:hover, .btn-outline-primary:hover {
                background-color: #275795 !important;
                color: white !important;
            }

            .outline-btn-primary:hover {
                color: rgba(39, 87, 149, 1);
            }
            .mr-r1 {
                margin-right: 1rem;
            }
        </style>
        <!-- main-content -->
        <section id="banner">
            <div class="container-fluid" id="banner-container">

                <div style="background-color: white;padding-left: 4%; padding-right: 1%;">
                    <div class="header">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12">
                                @if (arrId > 0)
                                {
                                    <div class="text-normal pr-2 pt-3" style="font-family: lato_light;font-size:25px;text-align:center;">
                                        EDIT DELEGATION ARRANGEMENT
                                    </div>
                                }
                                else
                                {
                                    <div class="text-normal pr-2 pt-3" style="font-family: lato_light;font-size:25px;text-align:center;">
                                        CREATE DELEGATION ARRANGEMENT
                                    </div>

                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-6 col-md-6 col-sm-6">

                    </div>

                    <div class="row" id="helpdeskDelegation">
                        <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 pt-5" id="movement-details">
                            <div class="row mb-4">
                                <div class="col-sm-12 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Delegation arrangement name*</label>
                                </div>
                                <div class="col-sm-12 col-md-6 col-lg-7 input-field">
                                    @Html.TextBoxFor(m => m[0].CreateDelegationList.ArrangementName, new { @id = "arrangName", @class = "edit-normal" })
                                    <span id="arrnameReqValidate" class="error invalid-feedback align" style="display:none">Delegation arrangement name is required.</span>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-sm-12 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Organisation name*</label>
                                </div>
                                <div class="col-sm-12 col-md-6 col-lg-7 input-field">
                                    @Html.TextBoxFor(m => m[0].CreateDelegationList.OrganisationName, new { @id = "organName", @class = "edit-normal" })
                                    <span id="validorganisation" class="error invalid-feedback" style="display:none">Organisation name is required.</span>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-sm-12 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal">Contact name*</label>
                                </div>
                                <div class="col-sm-12 col-md-6 col-lg-7 input-field text-normal new-vehicle">
                                    <div class="pl-6">
                                        @Html.DropDownListFor(model => model[0].CreateDelegationList.ContactType, (IEnumerable<SelectListItem>)Model[0].CreateDelegationList.ContactTypeList, new { @id = "ContactType", @class = "form-select",@style= "cursor:pointer; width: 13rem; height: 3rem;border-radius: 0.28rem;" })
                                    </div>
                                    @Html.TextBoxFor(m => m[0].CreateDelegationList.ContactName, new { @id = "contactName", @class = "edit-normal mt-5" })
                                    <span id="validContacttype" class="error invalid-feedback" style="display:none"> Contact name is required.</span>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-sm-12 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal" id="subdelegation" style="vertical-align: sub;">Allow sub-delegation?</label>
                                </div>
                                <div class="col-sm-12 col-md-6 col-lg-7 input-field text-normal">

                                    @Html.CheckBoxFor(m => m[0].CreateDelegationList.SubDelegation, new { @id = "subdel", @class = "checkbox" })

                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-sm-12 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal" style="vertical-align: sub;">
                                        Copy movement<br>notifications
                                        to me?
                                    </label>
                                </div>
                                <div class="col-sm-12 col-md-6 col-lg-7 input-field text-normal">

                                    @Html.CheckBoxFor(m => m[0].CreateDelegationList.CopyNotification, new { @id = "copynotification", @class = "checkbox" })
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-sm-12 col-md-6 col-lg-5 pr-0">
                                    <label class="text-normal" style="vertical-align: sub;">
                                        Receive notification
                                        when<br>delegation arrangement fails?
                                    </label>
                                </div>
                                <div class="col-sm-12 col-md-6 col-lg-7 input-field text-normal">
                                    <div class="row">
                                        <div class="col-sm-12 col-md-3 col-lg-3 input-field text-normal">
                                            <div class="form-check">

                                                @Html.RadioButtonFor(model => model[0].CreateDelegationList.SelectedType, STP.Domain.Structures.AcceptType.Yes, htmlAttributes: new { @class = "form-check-input" })
                                                <label class="form-check-label label1 text-color3" for="flexRadioDefault1">
                                                    Yes
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-sm-12 col-md-3 col-lg-3 input-field text-normal">
                                            <div class="form-check">

                                                @Html.RadioButtonFor(model => model[0].CreateDelegationList.SelectedType, STP.Domain.Structures.AcceptType.No, htmlAttributes: new { @class = "form-check-input" })
                                                <label class="form-check-label label1 text-color3" for="flexRadioDefault1">
                                                    No
                                                </label>
                                            </div>
                                            @Html.HiddenFor(m => m[0].CreateDelegationList.OrganisationId, new { @id = "OrganisationId" })
                                            @Html.HiddenFor(m => m[0].CreateDelegationList.ContactId, new { @id = "ContactId" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 pt-5" id="structure-list">
                            <div style="padding-right: 5%;">
                                <div class="row">
                                    <div class="col-sm-7 col-md-7 col-lg-7">
                                        @*pr-0 mb-2*@
                                        <div class="button main-button pt-3">
                                            @if (TempData["strucInDelCount"] != null && Convert.ToInt16(TempData["strucInDelCount"]) > 0)
                                            {
                                                <button id="addStructure" class="btn outline-btn-primary btn-layout2 SOAButtonHelper fAdd pl-8 pr-8" type="button" aria-pressed="true"
                                                        @*style="width: 60%;"*@>
                                                    ADD/REMOVE STRUCTURE
                                                </button>
                                            }
                                            else
                                            {
                                                <button id="addStructure" class="btn outline-btn-primary btn-layout1 SOAButtonHelper fAdd pl-8 pr-8" type="button" aria-pressed="true"
                                                        @*style="width: 70%;"*@>
                                                    ADD STRUCTURE
                                                </button>

                                            }


                                        </div>
                                    </div>
                                </div>
                                <div class="main-table" id="portal-table">
                                    @if (TempData["subDelegationStructures"] != null && TempData["subDelegationStructures"] != string.Empty)
                                    {
                                        <table class="create_deleg table">
                                            <tr>
                                                <td colspan="2" class="delegation_td tdcenter">
                                                    <span class="fontcolor" style="color:red;">Following structure(s) @TempData["subDelegationStructures"] cannot be delegated further.</span>
                                                </td>
                                            </tr>
                                        </table>
                                    }
                                    <table>
                                        <tr>
                                            <th>
                                                Structure Name<span>
                                                    <img src="assets/images/down-chevlon.svg" width="15"
                                                         height="6">
                                                </span>
                                            </th>
                                            <th>Structure Reference</th>
                                            <th>Owned By</th>
                                        </tr>
                                        <tr>
                                            @if (Model[0].StructuresGridToShow != null)
                                            {

                                                List<STP.Domain.Structures.StructureInDelegationList> structureInDelegList = new List<STP.Domain.Structures.StructureInDelegationList>();
                                                structureInDelegList = (List<STP.Domain.Structures.StructureInDelegationList>)Model[0].StructuresGridToShow;

                                                if (structureInDelegList.Count > 0)
                                                {
                                                    foreach (STP.Domain.Structures.StructureInDelegationList structitem in structureInDelegList)
                                                    {
                                                    <tr>
                                                        <td class="text-color1" style="width: 45%;">@structitem.StructureName</td>
                                                        <td class="text-color1" style="width: 30%;">@structitem.StructureReference</td>
                                                        <td class="text-color1" style="width: 25%;">@structitem.StructureOwnedBy</td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    @*<td colspan="3" class="tdcenter fontcolor"><span>No structures added to delegation arrangement</span></td>*@
                                                    <td colspan="3" class="text-color1" style="color: red; text-align: center;">
                                                        No structures added to delegation arrangement
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                @*<td colspan="3" class="tdcenter fontcolor"><span>No structures added to delegation arrangement</span></td>*@
                                                <td colspan="3" class="text-color1" style="color: red; text-align: center;">
                                                    No structures are added to delegation arrangement
                                                </td>
                                            </tr>
                                        }

                                        </table>


                                    </div>
                                <div class="d-flex justify-content-center pt-3">
                                    @*@if (Convert.ToInt32(@ViewBag.TotalCount) > 0)*@
                                    @if (Model[0].TotalCount > 0)
                                    {
                                        if (listCount < Model.TotalItemCount)
                                        {
                                            <div class="pagination">
                                                @Html.PagedListPager(StructurePagingList, page => Url.Action("EditDelegation",
                                                               new
                                                               {
                                                                   B7vy6imTleYsMr6Nlv7VQ =
                                                                     STP.Web.Helpers.EncryptionUtility.Encrypt("page=" + page +
                                                                     "&arrangId=" + arrId +
                                                                     "&organisationId=" + orgId +
                                                                     "&OrgFromId=" + EditOrgId)
                                                               }),
                                                               new PagedListRenderOptions
                                                               {
                                                                   DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                                                                   DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                                                                   LinkToPreviousPageFormat = "<img src='/Content/assets/images/left-chevlon.svg' width='10'>",
                                                                   LinkToNextPageFormat = "<img src='/Content/assets/images/right-chevlon.svg' width='10'>",
                                                                   DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                                                                   DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                                                                   MaximumPageNumbersToDisplay = 3,
                                                                   DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                                                                   EllipsesFormat = "...",
                                                                   LinkToFirstPageFormat = "<div style='position:absolute;'><img src='/Content/assets/images/left-chevlon.svg' width='10'><img src='/Content/assets/images/left-chevlon.svg' width='10'></div>",
                                                                   LinkToLastPageFormat = "<div style='position:absolute;'><img src='/Content/assets/images/right-chevlon.svg' width='10'><img src='/Content/assets/images/right-chevlon.svg' width='10'></div>"
                                                               });
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="pagination"></div>
                                        }
                                 }
                                                @*else
                    {
                        <div class="error invalid-feedback" style="display: block !important; text-align: center;">@Resources.Resource.NoRecordFound</div>
                    }*@


                                            </div>
                                        </div>
                            </div>
                            <!-- table -->
                            <!-- end of table -->
                        </div>
                    <div class="flexer justify-content-center mt8">

                        @if (TempData["strucInDelCount"] != null && Convert.ToInt16(TempData["strucInDelCount"]) > 0)
                        {
                            <button type="button" id="saveDeleg" class="btn outline-btn-primary btn-normal btn-layout1 mr-r2 mb-2">SAVE</button>
                        }
                        <button id="BackDeleg" type="button" class="btn outline-btn-primary btn-normal btn-layout1  mb-2">BACK</button>
                    </div>
                    </div>
                </div>
            </section>
            <!-- end of main-content -->

        }
</body>


<script src="~/Scripts/Structures/CreateDelegation.js?V@(Session["ProjectVersion"])"></script>