@model STP.Common.SortHelper.SortActions

@{
    ViewBag.Title = "ProjectOverviewLeftPanel";
}
@{
    int isAdmin = 0;
    int userTypeID = 0;
    string SORTAllocateJob = null;
    string SORTCanAgreeAllSO = null;
    string SORTCanAgreeUpto150 = null;
    string SORTCANApproveSignVR1 = null;
    string SORTCreateJob = null;
    long UserId = 0;
    <style>
        .main-sort-content #CreateNewCandidate .btn {
            width: 10rem;
            margin-right: 1rem;
            margin-bottom: 1rem;
            padding: 0.3rem 1rem !important;
            /* text-align: center; */
        }

        .columnalign {
            width: 49%;
            vertical-align: top;
            display: inline-block;
            height: 200px;
            margin-top: 1rem;
        }

        .navalign {
            vertical-align: top;
            display: inline-block;
            width: 50%;
            height: 200px;
            margin-top: 1rem;
        }
    </style>
    if (Session["UserInfo"] != null)
    {
        var sessionValues = (STP.Domain.SecurityAndUsers.UserInfo)Session["UserInfo"];
        userTypeID = sessionValues.UserTypeId;
        SORTAllocateJob = sessionValues.SORTAllocateJob;
        if (sessionValues.IsAdmin == 1)
        {
            isAdmin = 1;
        }
        UserId = sessionValues.SortUserId;
    }
    bool IsSendChecking = false;
    if (ViewBag.SendForChecking != null)
    {
        IsSendChecking = ViewBag.SendForChecking;
    }
    bool IsSendSignOff = false;
    if (ViewBag.SendForSignOff != null)
    {
        IsSendSignOff = ViewBag.SendForSignOff;
    }
    bool IsCompleteChecking = false;
    if (ViewBag.IsCompleteChecking != null)
    {
        IsCompleteChecking = ViewBag.IsCompleteChecking;
    }
    bool IsSignoff = false;
    if (ViewBag.IsSignOff != null)
    {
        IsSignoff = ViewBag.IsSignOff;
    }
    bool IsDistribute = false;
    if (ViewBag.IsDistribute != null)
    {
        IsDistribute = ViewBag.IsDistribute;
    }
    bool IsAgreed = false;
    if (ViewBag.IsAgreed != null)
    {
        IsAgreed = ViewBag.IsAgreed;
    }
    bool IsUnagreed = false;
    if (ViewBag.IsUnagreed != null)
    {
        IsUnagreed = ViewBag.IsUnagreed;
    }
    int CheckingStatus = 0;
    if (ViewBag.CheckingStatus != null)
    {
        CheckingStatus = ViewBag.CheckingStatus;
    }
    bool VR1Sendforsignoff = false;
    if (ViewBag.VR1SendforSignOff != null)
    {
        VR1Sendforsignoff = ViewBag.VR1SendforSignOff;
    }
    bool IsVr1 = false;
    if (ViewBag.IsVR1 != null)
    {
        IsVr1 = ViewBag.IsVR1;
    }

    bool Show = false;
    if (ViewBag.Show != null)
    {
        Show = ViewBag.Show;
    }

}


<div class="row flexer justify-content-center pt-6" id="menu-buttons" style="width:100%;height:100%">
    @{
        if (Model.Allocation)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="inactive-button-allocate">
                <span class="pr-3">
                    <img src="~/Content/assets/images/user-arrow.svg" width="13" class="init_img">
                    <img src="~/Content/assets/images/user-arrow.svg" width="13" class="hover_img notify">
                </span>ALLOCATE
            </button>
            <button class="btn outline-btn-primary SOAButtonHelper" id="active-button-allocate"
                    style="display: none;">
                <span class="pr-3">
                    <img src="~/Content/assets/images/user-arrow.svg" width="13"
                         id="allocate-icon2" class="init_img">
                    <img src="~/Content/assets/images/user-arrow.svg" width="13" class="hover_img notify">
                </span>ALLOCATE
            </button>
        }
        if (Model.Decline)
        {
            
            <button class="btn outline-btn-primary SOAButtonHelper" id="tr_decline">
                <span class="pr-3">
                    <img src="~/Content/assets/images/decline.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/decline.svg" width="15" class="hover_img notify">
                </span>DECLINE
            </button>
            
        }
        if (Model.Withdraw)
        {
            
            <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex;" id="tr_withdraw">
                <span class="pr-3">
                    <img src="~/Content/assets/images/withdrawn.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/withdrawn.svg" width="15" class="hover_img notify">
                </span>WITHDRAW
            </button>
            
        }
        if (Model.Unwithdraw)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex;" id="tr_unwithdraw">
                <span class="pr-3">
                    <img src="~/Content/assets/images/withdrawn.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/withdrawn.svg" width="15" class="hover_img notify">
                </span>UNWITHDRAW
            </button>
        }
        if (Model.Agree)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnMovAgreefuntchck" style="display: flex;">
                <span class="pr-3">
                    <img src="~/Content/assets/images/agree.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/agree.svg" width="15" class="hover_img notify">
                </span>AGREE
            </button>
        }
        if (Model.UnAgree)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnMovUnagreefunt" style="display: flex;">
                <span class="pr-3">
                    <img src="~/Content/assets/images/decline.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/decline.svg" width="15" class="hover_img notify">
                </span>UNAGREE
            </button>
        }
        if (Model.SendforChecking)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnCandidateWorkAllocation" style="display: flex; width: auto;"
                    data-checking="checking"
                    data-schecking="SChecking">
                <span class="pr-3">
                    <img src="~/Content/assets/images/Group 133.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/Group 133.svg" width="15" class="hover_img notify">
                </span>SEND FOR CHECKING
            </button>
        }
        else if (Model.SendForQAChecking && Model.VR1Application == false)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;"
                    data-QAChecking="QAChecking"
                    id="tr_qa_check">
                <span class="pr-3">
                    <img src="~/Content/assets/images/Group 133.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/Group 133.svg" width="15" class="hover_img notify">
                </span>SEND FOR QA CHECKING
            </button>
        }
        if (Model.SendForSignOff && Model.VR1Application == false)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnSignOffVr1Application" style="display: flex; width: auto;"
                    data-SignOff="signoff"
                    data-FChecking="FChecking">
                <span class="pr-3">
                    <img src="~/Content/assets/images/Group 133.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/Group 133.svg" width="15" class="hover_img notify">
                </span>SEND FOR FINAL CHECKING
            </button>
        }
    }
    @{
        if (Model.CompleteChecking)
        {
            <button class="btn outline-btn-primary SOAButtonHelper"
                    id="btnCompleteChecking"
                    style="display: flex; width: auto;"
                    data-CompleteChecking="checking"
                    data-CSChecking="CSChecking">
                <span class="pr-3">
                    <img src="~/Content/assets/images/Path 842-new.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/Path 842-new.svg" width="15" class="hover_img notify">
                </span>COMPLETE CHECKING
            </button>
        }
        else if (Model.CompleteQAChecking && Model.VR1Application == false)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;"
                    id="btnCompleteQAChecking"
                    data-QAChecking="QAChecking"
                    data-CQAChecking="CQAChecking">
                <span class="pr-3">
                    <img src="~/Content/assets/images/Path 842-new.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/Path 842-new.svg" width="15" class="hover_img notify">
                </span>COMPLETE QA CHECKING
            </button>
        }
        if (Model.VR1Application == false)
        {
            if (Model.CreateMovementVersion)
            {
                <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;"
                        id="btnCreatemovementversionClick">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 1360-new.svg" width="15" class="init_img">
                        <img src="~/Content/assets/images/Group 1360-new.svg" width="15" class="hover_img notify">
                    </span>CREATE MOVEMENT VERSION
                </button>
            }
            if (Model.SignOff)
            {
                <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;"
                        id="btnSignOff"
                        data-SignOff="signoff"
                        data-CFChecking="CFChecking">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 133.svg" width="15" class="init_img">
                        <img src="~/Content/assets/images/Group 133.svg" width="15" class="hover_img notify">
                    </span>COMPLETE FINAL CHECKING
                </button>
            }
            if (Model.DistributeMovements)
            {
                <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;"
                        id="btnDistributeMovement">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 133.svg" width="15" class="init_img">
                        <img src="~/Content/assets/images/Group 133.svg" width="15" class="hover_img notify">
                    </span>DISTRIBUTE MOVEMENT
                </button>
            }
            else if (Model.DistributeAgreedRoute)
            {
                <button class="btn outline-btn-primary SOAButtonHelper" id="btnDistributeAgreedRoute" style="display: flex; width: auto;">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 133.svg" width="15" class="init_img">
                        <img src="~/Content/assets/images/Group 133.svg" width="15" class="hover_img notify">
                    </span>DISTRIBUTE AGREED ROUTE
                </button>
            }
            if (Model.AmendmentOrder)
            {
                <button class="btn outline-btn-primary SOAButtonHelper" id="btnCreateAmendementOrder" style="display: flex; width: auto;">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 1360-new.svg" width="15" class="init_img">
                        <img src="~/Content/assets/images/Group 1360-new.svg" width="15" class="hover_img notify">
                    </span>CREATE AMENDMENT ORDER
                </button>
            }
            if (Model.CreateCandidateVersion)
            {
                <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;" id="inactive-button-candidate">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 1360-new.svg" width="20" class="init_img">
                        <img src="~/Content/assets/images/Group 1360-new.svg" width="20" class="hover_img notify">
                    </span>CREATE NEW CANDIDATE VERSION
                </button>
                <button class="btn outline-btn-primary SOAButtonHelper" id="active-button-candidate"
                        style="display: none; width: auto;">
                    <span class="pr-3">
                        <img src="~/Content/assets/images/Group 1360.svg" width="20" id="imgCreateNew">
                    </span>CREATE NEW CANDIDATE
                    VERSION
                </button>
            }
        }
        if (Model.ApproveVr1 == true)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnVR1approvalChck" style="display: flex; width: auto;">
                <span class="pr-3">
                    <img src="~/Content/assets/images/approve-VR1.svg" width="17" class="init_img">
                    <img src="~/Content/assets/images/approve-VR1.svg" width="17" class="hover_img notify">
                </span>APPROVE VR1
            </button>
        }
        if (Model.VR1Number == true)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnGenerateVR1Number" style="display: flex; width: auto;">
                <span class="pr-3">
                    <img src="~/Content/assets/images/generate-VR1.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/generate-VR1.svg" width="15" class="hover_img notify">
                </span>GENERATE VR1
            </button>
        }
        if (Model.VR1Document == true)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" style="display: flex; width: auto;" id="td_VR1_doc">
                <span class="pr-3">
                    <img src="~/Content/assets/images/generate-VR1.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/generate-VR1.svg" width="15" class="hover_img notify">
                </span>GENERATE VR1 DOCUMENT
            </button>
        }
        if (Model.Acknowledgement == true)
        {
            <button class="btn outline-btn-primary SOAButtonHelper" id="btnAcknowledgementClick" style="display: flex; width: auto;">
                <span class="pr-3">
                    <img src="~/Content/assets/images/withdrawn.svg" width="15" class="init_img">
                    <img src="~/Content/assets/images/withdrawn.svg" width="15" class="hover_img notify">
                </span>ACKNOWLEDGE
            </button>
        }
    }

</div>
<div class="container elem" id="container" style="display:none">
    <div class="navalign" id="AllocateUser"></div>
    <div class="elem columnalign" id="CreateNewCandidate"></div>
</div>


@{
    <input type="hidden" value="@ViewBag.EnterdbySort" id="hf_EnterdbySort" name="hf_EnterdbySort" />
}
@*<script src="~/Scripts/SORTApplication/ProjectOverviewLeftPanel.js?V@(Session["ProjectVersion"])"></script>*@
