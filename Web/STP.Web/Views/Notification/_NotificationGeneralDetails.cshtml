@model STP.Domain.MovementsAndNotifications.Notification.NotificationGeneralDetails
@using STP.Domain.VehiclesAndFleets.Configuration;
@using STP.Domain.Workflow
@using STP.Common.Enums
@using STP.Domain.VehiclesAndFleets
@{
    var MovementTypeClass = new VehicleMovementType();
    var IsIndemnityNeeded = false;
    var planMovePayLoad = new PlanMvmntPayLoad();
    bool requireVR1 = false;
    bool requireSO = false;
    bool ConstructionAndUse = false;
    if (ViewBag.PlanMvmntPayLoad != null)
    {
        planMovePayLoad = (PlanMvmntPayLoad)ViewBag.PlanMvmntPayLoad;
        MovementTypeClass = (VehicleMovementType)planMovePayLoad.MvmntType;
        requireVR1 = planMovePayLoad.RequireVr1;
        requireSO = planMovePayLoad.RequireSO;
    }

    if (MovementTypeClass != null)
    {
        if (MovementTypeClass.SOANoticePeriod > 0)
        {
            IsIndemnityNeeded = true;
        }
        if (MovementTypeClass.VehicleClass == (int)STP.Domain.VehiclesAndFleets.VehicleEnums.VehicleClassificationType.WheeledConstructionAndUse)
        {
            ConstructionAndUse = true;
        }
    }
}
<style>
    input[type=checkbox]::before {
        width: 27px !important;
        height: 27px !important;
    }

    #ui-datepicker-div th:last-child {
        background-color: rgba(39, 87, 149, 1) !important;
    }
</style>

@Html.Hidden("IsIndemnityNeeded", IsIndemnityNeeded)
<div id="imminentBanner" class="row" style="margin-bottom: 25px;width: 100%;display:none;">
        <span id="imminentBannerMsg"></span>
</div>

<fieldset id="formnsd" name="formnsd">
    <div class="col-lg-12 col-md-12 col-sm-12" style="text-align: right">
        <label class="text-normal">* indicates mandatory fields</label>
    </div>


    <div class="overview">
        <div class="row mt-4 main-entry">
            <div class="col-lg-6 col-md-12 col-sm-12">
                <div class="row mb-2">
                    @{
                        if (MovementTypeClass.VehicleClass == (int)VehicleEnums.VehicleClassificationType.VehicleSpecialOrder
                            && MovementTypeClass.MovementType == (int)MovementType.notification)
                        {
                            <div class="col-sm-4 col-md-6 col-lg-4 pr-0">
                                <label class="text-normal">VSO Number*</label>
                            </div>
                            <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                                @Html.TextBoxFor(m => m.VSONumber, new { @id = "VSONumber", @class = "required edit-normal wd100 onchangefunctionDN" })
                                @Html.ValidationMessageFor(m => m.VSONumber)
                                <span id="spnVSONumber" class="error "></span>
                            </div>
                        }
                        else if (MovementTypeClass.MovementType == (int)MovementType.notification && requireVR1)
                        {
                            if (Model.VR1Number == "0" || Model.VR1Number == "" || Model.VR1Number == null)
                            {
                                <span class="text-normal pb-3" id="spanVR1Warning" style="font-size: 12px !important;">
                                    Please enter the VR-1 reference number of the VR-1. If you have no VR-1 reference number yet as the VR-1 is still to be
                                    approved, then please leave this VR-1 number blank. Please note that you should re-notify when the VR-1 is approved, to provide the VR-1 number to SOA and Police.
                                </span>
                            }
                            <div class="col-sm-4 col-md-6 col-lg-4 pr-0">
                                <label class="text-normal">VR1 Reference Number</label>
                            </div>
                            <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                                @Html.TextBoxFor(m => m.VR1Number, new { @id = "VR1Number", @class = "edit-normal wd100 onchangefunctionDN" })
                            </div>
                        }
                        else if (MovementTypeClass.MovementType == (int)MovementType.notification && requireSO)
                        {
                            <span class="text-normal pb-3"><b>Please separate individual SO reference numbers with a comma.</b></span>
                            <div class="col-sm-4 col-md-6 col-lg-4 pr-0">
                                <label class="text-normal">SO Reference Number</label>
                            </div>
                            <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                                @Html.TextBoxFor(m => m.SONumbers, new { @id = "SONumbers", @class = "edit-normal wd100 onchangefunctionDN" })
                            </div>
                        }
                    }

                </div>

                <div class="row mb-2">
                    <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                        <label class="text-normal">Reference Number*</label>
                    </div>
                    <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                        @Html.TextBoxFor(m => m.MyReference, new { @class = "required edit-normal wd100 onchangefunctionDN", @id = "MyReference" })
                        @Html.ValidationMessageFor(m => m.MyReference)
                        <span id="spnMyReference" class="error"></span>
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-sm-4 col-md-6 col-lg-4 pr-0">
                        <label class="text-normal">Operators License*</label>
                    </div>
                    <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                        @Html.TextBoxFor(m => m.HaulierOprLicence, new { @id = "HaulierOprLicence", @class = "required edit-normal wd100 onchangefunctionDN" })
                        <span id="spnHaulierOprLicence" class="error"></span>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 col-md-6 col-lg-4 pr-0">
                        <label class="text-normal">From Summary*</label>
                    </div>
                    <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                        @Html.TextBoxFor(m => m.FromSummary, new { @id = "FromSummary", @class = "required edit-normal wd100 onchangefunctionDN" })
                        @Html.ValidationMessageFor(m => m.FromSummary)
                        <span id="spnFromSummary" class="error"></span>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 col-md-6 col-lg-4 pr-0">
                        <label class="text-normal">To Summary*</label>
                    </div>
                    <div class="col-sm-12 col-md-7 col-lg-7 input-field">
                        @Html.TextBoxFor(m => m.ToSummary, new { @id = "ToSummary", @class = "required edit-normal wd100 onchangefunctionDN" })
                        @Html.ValidationMessageFor(m => m.ToSummary)
                        <span id="spnToSummary" class="error"></span>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-12 col-md-4 col-lg-4 pr-0">
                        <label class="text-normal">Date From*</label>
                    </div>
                    <div class="col-sm-12 col-md-8 col-lg-8">
                        <div class="row">
                            <div class="col-sm-12 col-md-5 col-lg-5 input-field text-normal pr-0"
                                 >
                                @if (Model.MovementDateFrom != null)
                                {
                                    <input type="text" value="@Model.MovementDateFrom.ToString("dd/MM/yyyy")" readonly="readonly" id="FromDateTime" class="text-normal datepicker edit-normal" name="FromDateTime" />
                                }
                                else
                                {
                                    <input type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")" readonly="readonly" id="FromDateTime" class="text-normal datepicker edit-normal" name="FromDateTime" />
                                }
                                <span id="spnFromDate" class="error"></span>
                            </div>
                            <div class="col-sm-12 col-md-3 col-lg-3 pr-0">
                                <label class="text-normal">Time From*</label>
                            </div>
                            <div class="col-sm-12 col-md-2 col-lg-3 input-field text-normal pl-0"
                                 >
                                @if (Model.MovementDateFrom != null)
                                {
                                    var timeFrom = Model.MovementDateFrom.ToString("HH:mm") != "00:00" ? Model.MovementDateFrom.ToString("HH:mm") : "";
                                    <input class="required edit-normal" value="@timeFrom" type="time" name="FromDate" id="TimeFrom" style="border-style: none; border-bottom: solid 1px rgba(206, 206, 206, 1);">
                                }
                                else
                                {
                                    <input class="required edit-normal" type="time" name="FromDate" id="TimeFrom" style="border-style: none; border-bottom: solid 1px rgba(206, 206, 206, 1);">
                                }

                                <span id="spnFromTime" class="error"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                        <label class="text-normal">Date To*</label>
                    </div>
                    <div class="col-sm-12 col-md-8 col-lg-8">
                        <div class="row">
                            <div class="col-sm-12 col-md-5 col-lg-5 input-field text-normal pr-0"
                                 style="position: relative;">
                                @if (Model.MovementDateTo != null)
                                {
                                    <input type="text" value="@Model.MovementDateTo.ToString("dd/MM/yyyy")" readonly="readonly" id="ToDateTime" class="text-normal datepicker edit-normal" name="ToDateTime" />
                                }
                                else
                                {
                                    <input type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")" readonly="readonly" id="ToDateTime" class="text-normal datepicker edit-normal" name="ToDateTime" />
                                }

                                @Html.ValidationMessageFor(m => m.FromDateTime)
                                <span id="spnToDate" class="error"></span>
                            </div>
                            <div class="col-sm-12 col-md-3 col-lg-3 pr-0">
                                <label class="text-normal">Time To*</label>
                            </div>
                            <div class="col-sm-12 col-md-3 col-lg-3 input-field text-normal pl-0"
                                 style="position: relative;">
                                @if (Model.MovementDateTo != null)
                                {
                                    var timeTo = Model.MovementDateTo.ToString("HH:mm") != "00:00" ? Model.MovementDateTo.ToString("HH:mm") : "";
                                    <input class="required edit-normal" value="@timeTo" type="time" name="ToDate" id="TimeTo" style="border-style: none; border-bottom: solid 1px rgba(206, 206, 206, 1);">
                                }
                                else
                                {
                                    <input class="required edit-normal" type="time" name="ToDate" id="TimeTo" style="border-style: none; border-bottom: solid 1px rgba(206, 206, 206, 1);">
                                }

                                <span id="spnToTime" class="error"></span>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="row mb-2">
                    <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                        <label class="text-normal">Client (Not visible to other users)</label>
                    </div>
                    <div class="col-sm-12 col-md-7 col-lg-7 input-field text-normal">
                        @Html.TextBoxFor(m => m.ClientName, new { @id = "ClientName", @class = "edit-normal wd100 onchangefunctionDN" })
                        @Html.ValidationMessageFor(m => m.ClientName)
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                        <label class="text-normal">Number of movements</label>
                    </div>
                    <div class="col-sm-2 col-md-2 col-lg-2 input-field text-normal">
                        @Html.TextBoxFor(m => m.NoOfMovements, new { @id = "NoOfMoves", @class = "required edit-normal onchangefunctionDN" })
                        @Html.ValidationMessageFor(m => m.NoOfMovements)
                        <span id="spnNoOfMoves" class="error"></span>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                        <label class="text-normal">Maximum number of pieces being moved in any load</label>
                    </div>
                    <div class="col-sm-2 col-md-2 col-lg-2 input-field text-normal">
                        @Html.TextBoxFor(m => m.MaxPiecesPerLoad, new { @id = "MaxPieces", @class = "required edit-normal onchangefunctionDN" })
                        @Html.ValidationMessageFor(m => m.MaximamPieces)
                        <span id="spnMaxPieces" class="error"></span>
                    </div>
                </div>

                @if (IsIndemnityNeeded)
                {
                    <div class="row mb-2">
                        <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                            <label class="text-normal">Do you have indemnity?*</label>

                        </div>
                        <div class="col-sm-4 col-md-1 col-lg-1 input-field text-normal">
                            @Html.CheckBoxFor(m => m.IndemnifyFlag, new { width = "28", @class = "checkbox", @id = "idemnity" })
                            <span id="spnIndemnifyFlag" style="white-space: nowrap;" class="error"></span>
                        </div>
                    </div>
                }
                @{
                    var display = "display: none;";
                    if (Model.IndemnifyFlag || !IsIndemnityNeeded)
                    {
                        display = "";
                    }
                }
                <div class="row mb-2" id="actingOnBehalf" style="@display">
                    <div class="row mb-2">
                        <div class="col-sm-12 col-md-12 col-lg-12 input-field text-normal">
                            If you are submitting this notification on behalf of another organisation, then please state the name of that organisation, otherwise leave this field empty.
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-sm-4 col-md-4 col-lg-4 pr-0">
                            <label class="text-normal">Acting on behalf of</label>
                        </div>
                        <div class="col-sm-12 col-md-7 col-lg-7 input-field text-normal">
                            @Html.TextBoxFor(m => m.ActingOnBehalfOf, new { @id = "ActingOnBehalfOf", @class = "edit-normal wd100 onchangefunctionDN" })
                        </div>
                    </div>
                </div>
                @if (IsIndemnityNeeded)
                {
                    <div class="row mb-2" id="show-idemnity" style="@display">
                        <div class="col-sm-4 col-md-4 col-lg-4 pr-0">

                        </div>
                        <div class="col-sm-12 col-md-7 col-lg-7 input-field text-normal">
                            <button class="btn-outline-primary SOAButtonHelper ml2 mb-2 btn-border-remove" id="btn_view_indemnification" style="background-color: white">
                                VIEW INDEMNIFICATION
                            </button>
                        </div>

                    </div>
                }
            </div>
            <div class="col-lg-6 col-md-12 col-sm-12 pr-8">

                <div class="row pb-4">
                    <label class="text-normal pb-3 pl-0">
                        Load description, including net dimensions
                        (length, width, height and weight)*
                    </label>
                    @Html.TextAreaFor(m => m.LoadDescription, new { @rows = "8", @id = "LoadDescription", @class = "required form-control edit-normal onchangefunctionDN", @maxlength = "1000", @style = "width: 100% !important;" })
                    @Html.ValidationMessageFor(m => m.LoadDescription)
                    <span id="spnLoadDescription" class="error"></span>
                </div>
                <div class="row pb-4">
                    <label class="text-normal pb-3 pl-0">Notes to be included in notification</label>
                    @Html.TextAreaFor(m => m.Notes, new { @rows = "3", @id = "Notes", @maxlength = "10000", @class = " form-control edit-normal onchangefunctionDN", @style = "width: 100% !important;" })
                    <span id="spnNotes" class="error"></span>
                </div>
                <div class="row">
                    <label class="text-normal pb-3 pl-0">Notes on escort</label>
                    @Html.TextAreaFor(m => m.NotesOnEscort, new { @rows = "3", @id = "NotesOnEscort", @maxlength = "500", @class = "form-control edit-normal onchangefunctionDN", @style = "width: 100% !important;" })
                </div>
            </div>
        </div>

        <div style="width:100%; float:left; height:1px;"></div>
        <div class="validation-summary-errors" data-valmsg-summary="true"><ul><li style="display:none"></li></ul></div>

    </div>

    @Html.Hidden("VSOType", "")
</fieldset>
@{
    Html.RenderAction("ViewRouteVehicleList", "Application", new { cont_Ref_No = planMovePayLoad.ContenRefNo });
}
@{
    Html.RenderAction("NotificationTermsAndConditions", "Notification", new { IsTermsAndConditionsAccepted = planMovePayLoad.IsTermsAndConditionsAccepted });
}

<style>
    .error {
        display: block;
        width: 100%;
        margin-top: 0.25rem;
        font-size: .875em;
        color: #dc3545;
    }
</style>
@Html.Hidden("hf_VehicleClass", planMovePayLoad.MvmntType.VehicleClass)
@Html.Hidden("hf_ConstructionAndUse", ConstructionAndUse)
