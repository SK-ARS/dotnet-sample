@using STP.Domain.VehiclesAndFleets.Configuration;
@using STP.Domain.Workflow;
@using STP.Common.Enums;
@{
    var VehicleList = (List<AppVehicleConfigList>)ViewBag.VehicleList;
    var RouteList = (List<STP.Domain.Routes.AppRouteList>)ViewBag.MovementRouteList;

    var VehicleIdArr = VehicleList.Select(x => x.VehicleId).ToArray();
    var RouteIdArr = (RouteList != null && RouteList.Count > 0) ? RouteList.Select(x => x.RouteID).ToArray() : new long[] { };
    var ReturnRouteIdArr = (RouteList != null && RouteList.Count > 0) ? RouteList.Where(x => x.ReturnRouteType == (int)RouteType.return_route).Select(x => x.RouteID).ToArray() : new long[] { };

    var routeIds = RouteList.Select(x => x.RouteID).ToList();
    var vehicleIds = VehicleList.Select(x => x.VehicleId).ToList();
    var returnRouteIds = RouteList.Select(x => x.ReturnRouteType).ToList();
    var routeNames = RouteList.Select(x => x.RouteName).ToList();
    var routeTypes = RouteList.Select(x => x.RouteType).ToList();


    var IsSort = false;
    var isCanidateModify = true;
    var isAgreedNotif = false;
    long vehicleMoveId = 0;
    var autoAssignRouteVehicle = false;
    var continueRouteAssessment = false;
    var isRouteSummaryPage = false;
    var returnRouteExist = false;
    var Notificationflag = false;
    var Assessmentstatus = "";
    if (ViewBag.IsCandidateModify != null)
    {
        isCanidateModify = ViewBag.IsCandidateModify;
    }
    if (ViewBag.AutoAssignRouteVehicle != null)
    {
        autoAssignRouteVehicle = ViewBag.AutoAssignRouteVehicle;
    }
    if (ViewBag.ContinueRouteAssessment != null)
    {
        continueRouteAssessment = ViewBag.ContinueRouteAssessment;
    }
    if (ViewBag.ReturnRouteExist != null)
    {
        returnRouteExist = ViewBag.ReturnRouteExist;
    }
    if (ViewBag.AssessmentStatus != null)
    {
        Assessmentstatus = ViewBag.AssessmentStatus;
    }
    var planMovePayLoad = new PlanMvmntPayLoad();
    var assignedVehicleList = new List<VehicleAssignment>();
    if (ViewBag.PlanMvmntPayLoad != null)
    {
        planMovePayLoad = (PlanMvmntPayLoad)ViewBag.PlanMvmntPayLoad;
        isAgreedNotif = planMovePayLoad.IsAgreedNotified;
        vehicleMoveId = planMovePayLoad.VehicleMoveId;
        assignedVehicleList = planMovePayLoad.VehicleAssignmentList;
        Notificationflag = planMovePayLoad.IsNotif;
        if (planMovePayLoad.IsRouteSummaryPage == 1) { isRouteSummaryPage = true; }
    }

    bool IsNotification = ViewBag.IsNotif;

    if (ViewBag.IsCandidateRoute == true)  // js file specific for candidate route
    {
        IsSort = true;
        <style>
            .pagination {
                color: rgba(92, 92, 92, 1)
            }
        </style>
    }
}

<input type="hidden" value="@ViewBag.PStatus" id="hf_PStatus" name="hf_PStatus" />
<input type="hidden" value="@ViewBag.CandidatePermission" id="hf_CandidatePermission" name="hf_CandidatePermission" />
@Html.Hidden("hf_pageflag", Session["pageflag"])
@Html.Hidden("hf_IsSupplimentarySaved", planMovePayLoad.IsSupplimentarySaved)
@Html.Hidden("hf_RouteListCount", RouteList.Count)
@Html.Hidden("hf_vehicleMoveId", vehicleMoveId)
@Html.Hidden("hf_routeIds", Html.Raw(Json.Encode(routeIds)))
@Html.Hidden("hf_route_vehicleIds", Html.Raw(Json.Encode(vehicleIds)))
@Html.Hidden("hf_returnRouteIds", Html.Raw(Json.Encode(returnRouteIds)))
@Html.Hidden("hf_routeNames", Html.Raw(Json.Encode(routeNames)))
@Html.Hidden("hf_routeTypes", Html.Raw(Json.Encode(routeTypes)))
@Html.Hidden("chkRouteID", 0)
@Html.Hidden("CandidateModifyflag", isCanidateModify)
@Html.Hidden("IsNotification", IsNotification)
@Html.Hidden("AutoAssignRouteVehicle", autoAssignRouteVehicle)
@Html.Hidden("ContinueRouteAssessment", continueRouteAssessment)
@Html.Hidden("hf_Assessmentstatus", Assessmentstatus)
@Html.Hidden("hf_Notificationflag", Notificationflag)
@Html.Hidden("AssignedVehicleList", Html.Raw(Json.Encode(assignedVehicleList)))
@Html.Hidden("IsRouteVehicleAssigned",planMovePayLoad.IsRouteVehicleAssigned)
<div id="content-header">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            @if (!isAgreedNotif && isCanidateModify)
            {
                if(!IsSort) 
                {
                <div class="row mb-4">
                    <div class="col-lg-2 col-md-3 col-sm-4 col-xs-4 pr-1 button main-button">
                        <button class="btn btn-outline-primary btn-normal" role="button" aria-pressed="true" id="planRouteonMap">
                            ADD ROUTE PART
                        </button>
                    </div>
                    <div class="col-lg-3 col-md-5 col-sm-4 col-xs-4 pr-1 button main-button">
                        <button class="btn btn-outline-primary btn-normal" role="button" id="assignVehicleToRoute">
                            ASSIGN VEHICLE(S) TO ROUTE PART
                        </button>
                    </div>
                </div>
                }
               else if (IsSort)
               {
                <div class="row mt-4">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <label class="title route-head">Import from</label>
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-lg-3 col-md-5 col-sm-8 col-xs-8 pr-1 button main-button" style="width: 18%;">
                        <button class="btn btn-outline-primary btn-normal" role="button"
                                aria-pressed="true" DataIsort2="true" id="ImportRouteFromPrevMovements">
                            PREVIOUS MOVEMENT
                        </button>
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-6 pr-1 button main-button" style="width: 18%;">
                        <button class="btn btn-outline-primary btn-normal" role="button"
                                aria-pressed="true" id="ImportRouteCurrentMovements">
                            CURRENT MOVEMENT
                        </button>
                    </div>
                    @Html.Hidden("IsCreateApplicationRoute")

                </div>
            }

            }
        </div>
    </div>
</div>

@if (isRouteSummaryPage)
{
    var showSortableItems = false;
    if (RouteList != null && RouteList.Any() && RouteList.Count > 1)
    {
        if ((RouteList.Count == 2 && RouteList.Any(x => x.HasReturnRoute || x.IsReturnRoute)))
        {

        }
        else
        {
            showSortableItems = true;
        }
    }
    Session["ShowSortableItems"] = showSortableItems;
    <div class="route-list @(showSortableItems?"route-list-sortable-container":"")">
        @foreach (var route in RouteList)
        {
            Html.RenderAction("SetRouteDetails", new { route = route, isNotif = ViewBag.IsNotif, isAgreedNotif = isAgreedNotif, isCandidateModify = ViewBag.IsCandidateModify, isCandidateRoute = ViewBag.IsCandidateRoute, routeCount = RouteList.Count });
        }
    </div>
    if (showSortableItems)
    {
        <p class="custom-p">Note : To change the order of your route sections, simply click and hold the left mouse button on the section you want to move, drag it to its desired location, and release the mouse button.</p>
    }
}
else if (IsSort)
{
    foreach (var route in RouteList)
    {
        Html.RenderAction("SetRouteDetails", new { route = route, isNotif = ViewBag.IsNotif, isAgreedNotif = isAgreedNotif, isCandidateModify = ViewBag.IsCandidateModify, isCandidateRoute = ViewBag.IsCandidateRoute, routeCount = RouteList.Count });
    }
}
@if (isCanidateModify && !isAgreedNotif)
{
    Html.RenderAction("SetRouteDetails", new { isNotif = ViewBag.IsNotif, isCandidateModify = ViewBag.IsCandidateModify, isCandidateRoute = ViewBag.IsCandidateRoute });
}


<style>
    .dropdown-menu li, .dropdown-menu li a {
        white-space: normal;
        float: left;
        width: 100%;
        height: auto;
        word-wrap: break-word;
    }

    #content-header .btn {
        width: -webkit-fill-available !important;
    }

    .route-list-sortable-container .highlight {
        border: 3px dashed rgba(39, 87, 149, 1);
        min-height: 150px;
        background: #f1f1f1;
    }

    .custom-order-tooltip {
        color: #000;
    }

    .custom-p {
        color: #000;
        float: left;
        padding: 0;
        padding-top: 15px;
        text-align: left;
    }
</style>
